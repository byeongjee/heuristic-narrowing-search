load ./sorts/fvp-bool.maude
load ./sorts/fvp-nat.maude
load ./sorts/base-types.maude

set include BOOL off .


mod MUTUAL-EXCLUSION-CLIENT-ATTS is
    protecting FVP-NAT .

    sorts Status InitStatus .
    subsort InitStatus < Status .

    op ready : -> InitStatus [ctor] .
    ops wait crit error : -> Status [ctor] .

    sorts StatusAttr InitStatusAttr .
    subsort InitStatusAttr < StatusAttr .

    op status`:_ : InitStatus -> InitStatusAttr [ctor prec 15 gather (&)] .
    op status`:_ : Status -> StatusAttr [ctor prec 15 gather (&)] .

    sorts CounterAttr InitCounterAttr .
    subsort InitCounterAttr < CounterAttr .

    op counter`:_ : FZero -> InitCounterAttr [ctor prec 15 gather (&)] .
    op counter`:_ : Natural -> CounterAttr [ctor prec 15 gather (&)] .

    sorts InitClientAttrSet ClientAttrSet .
    subsort InitClientAttrSet < ClientAttrSet .
    subsort InitStatusAttr InitCounterAttr < InitClientAttrSet .
    subsort StatusAttr CounterAttr < ClientAttrSet .
    op _,_ : InitStatusAttr InitCounterAttr -> InitClientAttrSet [ctor assoc comm format (d d s d)] .
    op _,_ : StatusAttr CounterAttr -> ClientAttrSet [ctor ditto] .
endm

mod MUTUAL-EXCLUSION-SERVER-ATTS is
    protecting OID-SET .
    protecting FVP-BOOL .

    sorts FlagAttr InitFlagAttr .
    subsort InitFlagAttr < FlagAttr .
    op incrit`:_ : False -> InitFlagAttr [ctor prec 15 gather (&)] .
    op incrit`:_ : Boolean -> FlagAttr [ctor prec 15 gather (&)] .

    sorts EmptyOidList OidList .
    subsorts EmptyOidList Oid < OidList .
    op nil : -> EmptyOidList [ctor] .
    op _::_ : OidList OidList -> OidList [ctor assoc id: nil] .

    sorts QueueAttr InitQueueAttr .
    subsort InitQueueAttr < QueueAttr .
    op waiting`:_ : EmptyOidList -> InitQueueAttr [ctor prec 15 gather (&)] .
    op waiting`:_ : OidList -> QueueAttr [ctor prec 15 gather (&)] .

    sorts ServerAttrSet InitServerAttrSet .
    subsort InitServerAttrSet < ServerAttrSet .
    subsorts InitFlagAttr InitQueueAttr < InitServerAttrSet .
    subsorts FlagAttr QueueAttr < ServerAttrSet .
    op _,_ : InitFlagAttr InitQueueAttr -> InitServerAttrSet [ctor assoc comm format (d d s d)] .
    op _,_ : FlagAttr QueueAttr -> ServerAttrSet [ctor ditto] .
endm


mod ALT-CONFIGURATION is
    protecting MUTUAL-EXCLUSION-CLIENT-ATTS .
    protecting MUTUAL-EXCLUSION-SERVER-ATTS .

    sorts Server Client Cid .
    subsorts Server Client < Cid .

    op Server : -> Server [ctor] .
    op Client : -> Client [ctor] .

    op server : -> Oid [ctor] .

    sorts None Object Msg ObjectSet Configuration InitObject InitConfiguration .
    subsort InitObject < Object InitConfiguration < Configuration .
    subsort Msg < Configuration .

    op none : -> InitConfiguration [ctor] .
    op __ : InitConfiguration InitConfiguration -> InitConfiguration [ctor assoc comm id: none] .
    op __ : Configuration Configuration -> Configuration [ctor assoc comm id: none] .

    op <_:_|_> : Oid Client InitClientAttrSet -> InitObject [ctor object] .
    op <_:_|_> : Oid Client ClientAttrSet -> Object [ctor object] .
    op <_:_|_> : Oid Server ServerAttrSet -> Object [ctor object] .
endm

mod GLOBAL is
    protecting ALT-CONFIGURATION .
    protecting FVP-NAT .

    sort Global .
    op {_} :  Configuration -> Global [ctor] .
endm

mod MESSAGE is
    protecting ALT-CONFIGURATION .

    sort MsgContent .
    ops request accessGranted release : -> MsgContent [ctor] .

    op msg_from_to_ : MsgContent Oid Oid -> Msg [ctor] .
endm


mod MUTUAL-EXCLUSION is
    protecting GLOBAL .
    protecting MESSAGE .
    vars N M : Natural . 
    vars O O' : Oid .
    var CONF : Configuration .
    var OL : OidList .

    rl [request-access] : 
    {< O : Client | status : ready, ATTS:CounterAttr > CONF}
    => 
    {< O : Client | status : wait, ATTS:CounterAttr > 
    (msg request from O to server) CONF}
    [narrowing] .

    rl [grant-access] : 
    {(msg request from O to server) 
    < server : Server | incrit : false, ATTS:QueueAttr > CONF}
    => 
    {< server : Server | incrit : true, ATTS:QueueAttr > 
    (msg accessGranted from server to O) CONF} 
    [narrowing] .

    rl [put-in-queue] : 
    {(msg request from O to server) 
    < server : Server | incrit : true, waiting : OL > CONF}
    => 
    {< server : Server | incrit : true, waiting : (OL :: O) > CONF} 
    [narrowing] .

    rl [start-cs] :
    {(msg accessGranted from server to O)
     < O : Client | status : wait, ATTS:CounterAttr >
     CONF}
   =>
   {< O : Client | status : crit, ATTS:CounterAttr > CONF} 
   [narrowing] .

    rl [exit-cs] :
    {< O : Client | status : crit, counter : N > CONF}
    =>
    {< O : Client | status : ready, counter : s N > 
    (msg release from O to server) CONF}
    [narrowing] .

    rl [noone-waiting] :
    {(msg release from O to server) 
    < server : Server | waiting : nil, ATTS:FlagAttr > CONF}
    =>
    {< server : Server | incrit : false, waiting : nil > CONF}
    [narrowing] .

    rl [grant-access-to-first-waiting] :
    {(msg release from O to server)
     < server : Server | waiting : O' :: OL, ATTS:FlagAttr > CONF}
    =>
    {< server : Server | waiting : OL, ATTS:FlagAttr > 
    (msg accessGranted from server to O') CONF}
    [narrowing] .


endm

mod MUTUAL-EXCLUSION-2 is
    protecting MUTUAL-EXCLUSION .

    var O : Oid .
    var N : Natural .
    var CONF : Configuration .

    rl [bug] :
    {< O : Client | status : crit, counter : s s N > CONF}
    =>
    {< O : Client | status : error, counter : s s N > CONF}
    [narrowing] .
endm

mod MUTUAL-EXCLUSION-3 is
    protecting MUTUAL-EXCLUSION .

    var O : Oid .
    var N : Natural .
    var CONF : Configuration .

    rl [bug] :
    {< O : Client | status : crit, counter : s s s N > CONF}
    =>
    {< O : Client | status : error, counter : s s s N > CONF}
    [narrowing] .
endm

mod MUTUAL-EXCLUSION-4 is
    protecting MUTUAL-EXCLUSION .

    var O : Oid .
    var N : Natural .
    var CONF : Configuration .

    rl [bug] :
    {< O : Client | status : crit, counter : s s s s N > CONF}
    =>
    {< O : Client | status : error, counter : s s s s N > CONF}
    [narrowing] .
endm

mod MUTUAL-EXCLUSION-CONST is
    protecting GLOBAL .
    protecting BOOL .

    var O : Oid . 
    var C : Cid .
    var OS : OidSet .
    var CF : Configuration .
    var PHI : Bool .
    vars N M N' M' : Natural .
    var INIT : InitConfiguration .

    op noDupl : OidSet -> Bool .
    eq noDupl(O ; O ; OS) = false .

    op getOids : Configuration -> OidSet [memo] .
    eq getOids(< O : C | ATTS:ClientAttrSet > CF) = O ; getOids(CF) .
    eq getOids(none) =  none .

endm

mod MUTUAL-EXCLUSION-ANALYSIS-BASE is
    protecting MUTUAL-EXCLUSION .
    protecting MUTUAL-EXCLUSION-CONST .
    including STATE .
    subsort Global < State .
    eq inv(S:State) = true .
endm

mod MUTUAL-EXCLUSION-ANALYSIS-2 is
    protecting MUTUAL-EXCLUSION-ANALYSIS-BASE .

    var O : Oid .
    var N : Natural .
    var CONF : Configuration .

    rl [bug] :
    {< O : Client | status : crit, counter : s s N > CONF}
    =>
    {< O : Client | status : error, counter : s s N > CONF}
    [narrowing] .
endm

mod MUTUAL-EXCLUSION-ANALYSIS-3 is
    protecting MUTUAL-EXCLUSION-ANALYSIS-BASE .

    var O : Oid .
    var N : Natural .
    var CONF : Configuration .

    rl [bug] :
    {< O : Client | status : crit, counter : s s s N > CONF}
    =>
    {< O : Client | status : error, counter : s s s N > CONF}
    [narrowing] .
endm

mod MUTUAL-EXCLUSION-ANALYSIS-4 is
    protecting MUTUAL-EXCLUSION-ANALYSIS-BASE .

    var O : Oid .
    var N : Natural .
    var CONF : Configuration .

    rl [bug] :
    {< O : Client | status : crit, counter : s s s s N > CONF}
    =>
    {< O : Client | status : error, counter : s s s s N > CONF}
    [narrowing] .
endm
