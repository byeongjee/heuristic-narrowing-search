fmod VALUE is
    protecting FVP-BOOL .

    sorts Value InitValue? Value? .
    subsort  Value < Value? .
    subsort InitValue? < Value? .

    ops v1 v2 : -> Value [ctor] .

    op nil : -> InitValue? [ctor] .
endfm


fmod STEP is
    sorts Step InitStep .
    subsort InitStep < Step .
    op init : -> InitStep [ctor] .
    ops wait done : -> Step [ctor] .
endfm


fmod NODE is
    sorts Node Cid  .
    subsort Node < Cid .
    op Node : -> Cid [ctor] .
endfm


fmod STATUS is
    protecting FVP-NAT .
    protecting STEP .

    sorts Status InitStatus .
    subsort InitStatus < Status .
    sort InitialRound .

    op [_,_] : Natural Step -> Status [ctor format (d d d s d d)] . 
    op [_,_] : Natural InitStep -> InitStatus [ctor ditto] . 
endfm


fmod VOTE is
    protecting FVP-NAT .
    protecting VALUE .

    sorts Vote InitVote .
    subsort InitVote < Vote .

    op [_,_,_] : FZero FZero FZero -> InitVote [ctor format (d d d s d s d d)] .
    op [_,_,_] : Natural Natural Natural -> Vote [ctor ditto] .

    vars V1 V2 VA : Natural .

    op update : Vote Value -> Vote .
    eq update([V1, V2, VA], v1) = [s V1, V2, s VA] [variant] .
    eq update([V1, V2, VA], v2) = [V1, s V2, s VA] [variant] .
    eq update([V1, V2, VA], v1) = [s V1, V2, s VA] .
    eq update([V1, V2, VA], v2) = [V1, s V2, s VA] .
endfm


fmod OID-SET is
    sorts Oid OidSet .
    subsort Oid < OidSet .
    op none : -> OidSet [ctor] .
    op _;_ : OidSet OidSet -> OidSet [ctor assoc comm id: none] .
endfm
