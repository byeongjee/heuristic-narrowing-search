
load ./sorts/fvp-bool.maude
load ./sorts/fvp-nat.maude
load ./sorts/sorts.maude

set include BOOL off .


mod ALT-CFIGURATION is
    protecting NODE .
    protecting INITIAL-SORTS .

    sorts None Object Msg ObjectSet Configuration InitObject InitConfiguration .
    subsort InitObject < Object InitConfiguration < Configuration .
    subsort Msg < Configuration .

    op none : -> InitConfiguration [ctor] .
    op __ : InitConfiguration InitConfiguration -> InitConfiguration [ctor assoc comm id: none] .
    op __ : Configuration Configuration -> Configuration [ctor assoc comm id: none] .

    op <_:_|_> : Oid Cid IU1234S -> InitObject [ctor object] .
    op <_:_|_> : Oid Cid U1234S -> Object [ctor object] .
endm


fmod MESSAGE-CONTENT is
    protecting FVP-NAT .
    protecting VALUE .

    sort MsgContent . 
    op vote : Value Natural -> MsgContent [ctor] .
endfm


mod MULTICAST is 
  including ALT-CFIGURATION .
  including MESSAGE-CONTENT .

  op multicast_from_to_ : MsgContent Oid OidSet -> Msg [ctor] .

  var MC : MsgContent . 
  var SENDER : Oid .

  eq multicast MC from SENDER to none = none [variant] .
  eq multicast MC from SENDER to none = none .
endm


mod GLOBAL is
    protecting ALT-CFIGURATION .
    protecting FVP-NAT .

    sort Global .
    op {_,_,_,_} : Natural Natural OidSet Configuration -> Global [ctor format (d d d d d s d s d d)] .
    op decide? :  Value Boolean Natural Natural OidSet Object Configuration -> Global [ctor] .
    op update? :  Value Boolean Natural Natural OidSet Object Configuration -> Global [ctor] .
endm


mod ONETHIRDRULE-CONST is
    protecting ALT-CFIGURATION .
    protecting SET{Natural} .
    protecting SET{VoteMap} .
    protecting BOOL .

    vars N N' R N1 N2 N3 : Natural . 
    vars V V1 V2 V3 : Value .
    var Z : FZero .  
    var S : Step .
    var CF : Configuration . 
    var MSG : Msg . 
    var O : Oid . 
    var OS : OidSet .
    var NS : Set{Natural} .
    var VM : VoteMap .
    var VMAPS : Set{VoteMap} .

    op noDupl : OidSet -> Bool .
    eq noDupl(O ; O ; OS) = false .

    op sameRound : Set{Natural} -> Bool .
    eq sameRound((R, s R N, NS)) = false .
    eq sameRound((R, R, NS)) = sameRound((R, NS)) .
    eq sameRound(R) = true .
    eq sameRound(empty) = true .

    op getOids : Configuration -> OidSet [memo] .
    eq getOids(< O : Node | ATTS:U1234S > CF) = O ; getOids(CF) .
    eq getOids(MSG CF) =  getOids(CF) .
    eq getOids(none) =  none .

    op numObjs : Configuration -> Natural .
    eq numObjs(< O : Node | ATTS:U1234S > CF) = s numObjs(CF) .
    eq numObjs(MSG CF) = numObjs(CF) .
    eq numObjs(none) = 0 .

    op getRounds : Configuration -> Set{Natural} .
    eq getRounds(< O : Node | status : [R, S], ATTS:U234S > CF) = R, getRounds(CF) .
    eq getRounds(MSG CF) = getRounds(CF) .
    eq getRounds(none) = 0 .

    op valid1/2 : Natural Natural -> Bool .
    eq valid1/2(s s N', s N) = valid1/2(N', N) .
    eq valid1/2(N, Z) = false .
    eq valid1/2(s N, s N N') = true .

    op noDuplicateVoteMap : Set{VoteMap} -> Bool .
    eq noDuplicateVoteMap((V |-> N1 ; V |-> N2 ; VM, VMAPS)) = false .

    op numItemsEq : Natural VoteMap -> Bool .
    eq numItemsEq(s N, ((V |-> N1) ; VM)) 
    = numItemsEq(N, VM) .
    eq numItemsEq(0, none) = true .
    eq numItemsEq(s N, none) = false .
    eq numItemsEq(0, ((V |-> N) ; VM)) = false .

    op numVoteMapOkay : Natural Set{VoteMap} -> Bool .
    eq numVoteMapOkay(N, (V |-> N1) ; VMAPS) 
    = numItemsEq(N, V |-> N1) and numVoteMapOkay(N, VMAPS) .
    eq numVoteMapOkay(N, empty) = true .

    op getVoteMaps : Configuration -> Set{VoteMap} .
    eq getVoteMaps(< O : Node | votes : [VM, N], ATTS:U123S > CF) 
    = VM, getVoteMaps(CF) .
    eq getVoteMaps(MSG CF) = getVoteMaps(CF) .
    eq getVoteMaps(none) = empty .
endm
