load ./onethirdrule-base.maude


mod ONETHIRDRULE-NO-MSG-LOSS is
    including GLOBAL .
    protecting MULTICAST .

    vars O O' : Oid . vars CF : Configuration . var C : Cid .
    vars OS OS' : OidSet . 
    var R TH V1 V2 VA : Natural .
    var Z : FZero .
    vars V V' : Value .

    rl [vote] : 
    {TH, O ; OS,
        < O : Node | status : [R, init], value : V, decision : nil, votes : [V1, V2, VA] > 
        CF
    }
    =>
    {TH, O ; OS,
        < O : Node | status : [R, wait], value : V, decision : nil, votes : update([V1, V2, VA], V) > 
        (multicast vote(V, R) from O to OS)
        CF
    } [narrowing] .


    rl [receive] :
    {TH, OS,
        < O : Node | status : [R, wait], decision : nil, votes : [V1, V2, VA], ATTS:U2S > 
        (multicast vote(V, R) from O' to (O ; OS'))
        CF
    } =>
    {TH, OS,
        < O : Node | status : [R, wait], decision : nil, votes : update([V1, V2, VA], V), ATTS:U2S > 
        (multicast vote(V, R) from O' to OS')  
        CF
    } [narrowing] .


    rl [decide-1-v1] :
    {TH, OS,
        < O : Node | status : [R, wait], decision : nil, votes : [V1, V2, VA], ATTS:U2S > 
        CF
    }
    =>
    decide?(v1, TH <= V1, TH, OS, 
        < O : Node | status : [R, wait], decision : nil, votes : [V1, V2, VA], ATTS:U2S >,
        CF
    ) [narrowing] .

    rl [decide-1-v2] :
    {TH, OS,
        < O : Node | status : [R, wait], decision : nil, votes : [V1, V2, VA], ATTS:U2S > 
        CF
    }
    =>
    decide?(v2, TH <= V2, TH, OS, 
        < O : Node | status : [R, wait], decision : nil, votes : [V1, V2, VA], ATTS:U2S >,
        CF
    ) [narrowing] .


    rl [decide-2] :
    decide?(V, true, TH, OS,
        < O : Node | status : [R, wait], decision : nil, ATTS:U24S >,
        CF)
    =>
    {TH, OS,
        < O : Node | status : [R, done], decision : V, ATTS:U24S >
        CF
    } [narrowing] .


    rl [update-1-v1] : 
    {TH, OS,
        < O : Node | status : [R, wait], decision : nil, votes : [V1, V2, VA], ATTS:U2S >
        CF
    }
    =>
    update?(v1, (V1 <  TH) and (TH <= VA) and (V2 <= V1),
        TH, OS,
        < O : Node | status : [R, wait], decision : nil, votes : [V1, V2, VA], ATTS:U2S >,
        CF
    ) [narrowing] .

    rl [update-1-v2] : 
    {TH, OS,
        < O : Node | status : [R, wait], decision : nil, votes : [V1, V2, VA] >
        CF
    }
    =>
    update?(v2, (V2 < TH) and (TH <= VA) and (V1 < V2),
        TH, OS,
        < O : Node | status : [R, wait], decision : nil, votes : [V1, V2, VA] >,
        CF
    ) [narrowing] .

    rl [update-2] : 
    update?(V', true, TH, OS,
        < O : Node | status : [R, wait], value : V, decision : nil, votes : [V1, V2, VA] >,
        CF
    )
    =>
    {TH, OS,
        < O : Node | status : [s R, init], value : V', decision : nil, votes : [0, 0, 0] >
        CF
    } [narrowing] .
endm


mod ONETHIRDRULE is
    including ONETHIRDRULE-NO-MSG-LOSS .
    var TH : Natural .
    var OS : OidSet . 
    var CF : Configuration . 
    var MSG : Msg .

    rl [loss] : 
    {TH, OS, MSG CF}
    =>
    {TH, OS, CF} [narrowing] .
endm


mod ONETHIRDRULE-NML-ANALYSIS is
    protecting ONETHIRDRULE-NO-MSG-LOSS .
    protecting ONETHIRDRULE-CONST .
    including STATE .
    subsort Global < State .
    eq inv(S:State) = true .
endm


mod ONETHIRDRULE-ANALYSIS is
    protecting ONETHIRDRULE .
    protecting ONETHIRDRULE-CONST .
    including STATE .
    subsort Global < State .
    eq inv(S:State) = true .
endm
