load ../heuristic-search/index.maude
load ../heuristic-search/invariant.maude
load ../heuristic-search/main.maude
load ../heuristic-search/score.maude
load ../heuristic-search/state.maude
load ../heuristic-search/term-transformer.maude

mod EXAMPLE-2 is
    protecting NAT .
    including STATE .

    ops f g : Nat -> State .

    var N : Nat .

    rl [l1-1]: f(s(0)) => f(0) [narrowing] .        *** an instance of l1
    rl [l1-2]: f(s(s(N))) => f(s(N)) [narrowing] .  *** an instance of l1
    rl [l2]: g(s(N)) => g(N) [narrowing] .
    rl [l3]: f(s(N)) => g(N) [narrowing] .
endm

mod EXAMPLE-2-WITH-INV is
    protecting EXAMPLE-2 .
    including INVARIANT .

    var N : Nat .

    eq initCond(S:State) = true .
    eq inv(g(s(s(s(N))))) = false .
    eq inv(f(s(s(s(N))))) = false .
endm

fmod EXAMPLE-2-SCORE is
    including SCORE .
    protecting NAT .

    subsort Nat < Score .

    vars N N' : Nat .

    eq le(N, N') = N <= N' .

    var F : Qid .
    var T : Term .
    var D : Nat .

    eq score(F[T], D) = 1 + score(T, D) .
    eq score(T, D) = 1 [owise] .
endfm

mod MAIN is
    protecting HEURISTIC-NARROWING .
    protecting EXAMPLE-2-SCORE .
    protecting DEFAULT-INDEX .
    protecting DEFAULT-TERM-TRANSFORMER .
endm

red in MAIN : metaHeuristicNarrowingSearch(
    upModule('EXAMPLE-2-WITH-INV, false),
    'f['X:Nat],
    'g['Y:Nat],
    'l1-2 ; 'l2,
    delay filter, unlimited) .