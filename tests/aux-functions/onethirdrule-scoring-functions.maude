
fmod ONETHIRDRULE-SCORE-BFS is
    including SCORE .
    protecting INT .

    subsort Nat < Score .

    vars N N' D : Nat .
    vars T : Term .

    eq le(N, N') = N <= N' .

    eq score(T, D) = D .
endfm

--- for SCORE-G and SCORE-1
fmod ONETHIRDRULE-SCORE-BASE is
    including SCORE .
    protecting INT .

    vars N N' : Nat .
    vars T TN TOS TV TB TOBJ TCF : Term .
    var D : Nat .
    var F : Qid .
    var V : Variable .
    var NTL : NeTermList .
    var TL : TermList .

    subsort Nat < Score .

    eq le(N, N') = N <= N' .

    eq score(F[TN,TOS,TCF], D) = score(TCF) .

    op score : Term -> Score .
    eq score('__[T, TL]) = score(T) + score('__[TL]) .
    eq score('__[empty]) = 0 .
    eq score('decide?[TV, TB, TN, TOS, TOBJ, TCF], D) = score('__[TOBJ, TCF]) .
    eq score('update?[TV, TB, TN, TOS, TOBJ, TCF], D) = score('__[TOBJ, TCF]) .
    eq score(V) = 0 .

    *** auxiliary function
    op toNumber : Term -> Nat .
    eq toNumber('s.Natural) = 1 .
    eq toNumber('__[T, TL]) = toNumber(T) + toNumber('__[TL]) .
    eq toNumber('__[empty]) = 0 .
    eq toNumber(V) = 0 .
endfm

fmod ONETHIRDRULE-SCORE-G is
    including ONETHIRDRULE-SCORE-BASE .

    var TL : TermList .

    eq score('<_:_|_>[TL]) =  1 . 
    eq score('multicast_from_to_[TL]) = 0 .
endfm


fmod ONETHIRDRULE-SCORE-1 is
    including ONETHIRDRULE-SCORE-BASE .

    vars TO TC TS TR : Term .
    vars TL : TermList .

    eq score('<_:_|_>[TO, TC, '_`,_['status`:_['`[_`,_`][TR, TS]], TL]])
     = (if TS == 'done.Step then 1 else 10 fi) + max(1, toNumber(TR)) .

    eq score('multicast_from_to_[TL]) = 0 .
endfm

fmod ONETHIRDRULE-SCORE-2 is
    including ONETHIRDRULE-SCORE-BASE .

    vars TO TC TS TR : Term .
    vars TL : TermList .

    eq score('<_:_|_>[TO, TC, '_`,_['status`:_['`[_`,_`][TR, TS]], TL]])
     = (if TS == 'done.Step then 9 else 10 fi) + max(1, toNumber(TR)) .

    eq score('multicast_from_to_[TL]) = 0 .
endfm


fmod ONETHIRDRULE-SCORE-3 is
    including ONETHIRDRULE-SCORE-BASE .

    subsort Int < Score .

    vars TO TC TS TR : Term .
    vars TL : TermList .

    eq score('<_:_|_>[TO, TC, '_`,_['status`:_['`[_`,_`][TR, TS]], TL]])
     = 100 + 10 * max(1, toNumber(TR)) .

    eq score('multicast_from_to_[TL]) = -1 .
endfm
