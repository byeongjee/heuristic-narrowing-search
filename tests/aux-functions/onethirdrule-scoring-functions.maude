load ../../heuristic-search/score.maude


fmod ONETHIRDRULE-SCORE1 is
    including SCORE .
    protecting INT .

    subsort Int < Score .

    vars N N' D : Int .
    vars T : Term .

    eq le(N, N') = N <= N' .

    eq score(T, D) = D .
endfm

--- for score2 and score3
fmod ONETHIRDRULE-SCORE-BASE is
    including SCORE .
    protecting INT .

    subsort Int < Score .

    vars N N' : Int .
    vars T BT NT OST OT CT ST : Term .
    var D : Nat .
    var NETL : NeTermList .

    eq le(N, N') = N <= N' .

    eq score(
        '`{_`,_`,_`}[T, OST, NETL], D
    ) = score(NETL) .

    op score : NeTermList -> Score .

    eq score('__[NETL]) = score(NETL) .
    eq score((T, NETL)) 
    = score(T) + score(NETL) .

    eq score(T) = 0 [owise] .

    *** auxiliary functions
    op toNumber : Term -> Int .
    eq toNumber('0.Natural) = 0 .
    eq toNumber('s.Natural) = 1 .
    eq toNumber('__[NETL]) = countS(NETL) .
    eq toNumber(T) = 0 [owise] .

    op countS : NeTermList -> Int .
    eq countS('s.Natural) = 1 .
    eq countS(T) = 0 [owise] .
    eq countS((T, NETL)) = countS(T) + countS(NETL) .
endfm

fmod ONETHIRDRULE-SCORE2 is
    including ONETHIRDRULE-SCORE-BASE .

    vars T VT BT NT OST OT CT ST : Term .
    var D : Nat .

    eq score(
        'decide?[VT, BT, NT, OST, OT, CT], D
    ) = score((OT, CT)) .
    eq score(
        'update?[VT, BT, NT, OST, OT, CT], D
    ) = score((OT, CT)) .

    var NETL : NeTermList .

    eq score('<_:_|_>[NETL]) =  1 . 

    eq score('multicast_from_to_[NETL]) = 0 .
endfm


fmod ONETHIRDRULE-SCORE3 is
    including ONETHIRDRULE-SCORE-BASE .

    vars T VT BT NT OST OT CT ST DT RT : Term .
    var D : Nat .

    eq score(
        'decide?[VT, BT, NT, OST, OT, CT], D
    ) = score((OT, CT)) .
    eq score(
        'update?[VT, BT, NT, OST, OT, CT], D
    ) = score((OT, CT)) .

    vars NETL NETL' : NeTermList .

    eq score('<_:_|_>[OT, CT, '_`,_[
        'status`:_['`[_`,_`][RT, ST]], NETL]])
    = if ST == 'done.Step then 1 else 10 fi .

    eq score('multicast_from_to_[NETL]) = 0 .
endfm

fmod ONETHIRDRULE-SCORE4 is
    including ONETHIRDRULE-SCORE-BASE .

    vars T VT BT NT OST OT CT ST : Term .
    var D : Nat .

    eq score(
        'decide?[VT, BT, NT, OST, OT, CT], D
    ) = score((OT, CT)) + (- 1) .
    eq score(
        'update?[VT, BT, NT, OST, OT, CT], D
    ) = score((OT, CT)) + (- 1) .

    var NETL : NeTermList .

    eq score('<_:_|_>[NETL]) =  10 . 

    eq score('multicast_from_to_[NETL]) = 0 .
endfm


fmod ONETHIRDRULE-SCORE5 is
    including ONETHIRDRULE-SCORE-BASE .

    vars T VT BT NT OST OT CT ST DT RT : Term .
    var D : Nat .

    eq score(
        'decide?[VT, BT, NT, OST, OT, CT], D
    ) = score((OT, CT)) + (- 1) .
    eq score(
        'update?[VT, BT, NT, OST, OT, CT], D
    ) = score((OT, CT)) + (- 1) .

    vars NETL NETL' : NeTermList .

    eq score('<_:_|_>[OT, CT, '_`,_[
        'status`:_['`[_`,_`][RT, ST]], NETL]])
    =  if ST == 'done.Step then 10 else 100 fi .

    eq score('multicast_from_to_[NETL]) = 0 .
endfm