
load ../../models/onethirdrule.maude
load ../../models/onethirdrule-nondeterministic.maude
load ../../heuristic-search/invariant.maude

mod ONETHIRDRULE-INVARIANT-HALF is
    protecting ONETHIRDRULE .
    including INVARIANT .

    var N : Nat .
    var CONF : Configuration .
    var M : Msg .
    vars O O' : Oid .
    var C : Cid .
    vars OIDS NEIGHBORS : OidSet .
    var Z : Zero .

    eq inv(SK:[State]) = true .
    eq initialCond({N, OIDS, CONF}) 
    = noDuplicate(OIDS) 
    and noDuplicate(getOids(CONF)) 
    and isThresholdValid(getOids(CONF), N) .

    op getOids : Configuration -> OidSet [memo] .
    eq getOids(< O : C | ATTS:U1234S > CONF) = O ; getOids(CONF) .
    eq getOids(M CONF) =  getOids(CONF) .
    eq getOids(none) =  none .

    op noDuplicate : OidSet -> Bool [memo] .
    eq noDuplicate(O ; O ; OIDS) = false .

    op isThresholdValid : OidSet Nat -> Bool [memo] .
    eq isThresholdValid((O ; O' ; OIDS), s N) = isThresholdValid(OIDS, N) .
    eq isThresholdValid(OIDS, Z) = false .

endm

mod ONETHIRDRULE-NONDETERMINISTIC-INVARIANT-HALF is
    protecting ONETHIRDRULE .
    including INVARIANT .

    var N : Nat .
    var CONF : Configuration .
    var M : Msg .
    vars O O' : Oid .
    var C : Cid .
    vars OIDS NEIGHBORS : OidSet .
    var Z : Zero .

    eq inv(SK:[State]) = true .
    eq initialCond({N, OIDS, CONF}) 
    = noDuplicate(OIDS) 
    and noDuplicate(getOids(CONF)) 
    and isThresholdValid(getOids(CONF), N) .

    op getOids : Configuration -> OidSet [memo] .
    eq getOids(< O : C | ATTS:U1234S > CONF) = O ; getOids(CONF) .
    eq getOids(M CONF) =  getOids(CONF) .
    eq getOids(none) =  none .

    op noDuplicate : OidSet -> Bool [memo] .
    eq noDuplicate(O ; O ; OIDS) = false .

    op isThresholdValid : OidSet Nat -> Bool [memo] .
    eq isThresholdValid((O ; O' ; OIDS), s N) = isThresholdValid(OIDS, N) .
    eq isThresholdValid(OIDS, Z) = false .

endm