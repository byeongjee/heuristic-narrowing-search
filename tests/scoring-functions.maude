load ../heuristic-search/main.maude

mod SCORE1 is
    including HEURISTIC-NARROWING .
    protecting INT .

    subsort Int < Score .

    vars N N' D : Int .
    vars T : Term .

    eq le(N, N') = N <= N' .

    eq score(T, D) = D .
endm

*** for score2 and score3
mod SCORE-BASE is
    including HEURISTIC-NARROWING .
    protecting INT .

    subsort Int < Score .

    vars N N' : Int .
    vars T BT NT OIDT OT CT ST : Term .
    var D : Nat .
    var NETL : NeTermList .

    eq le(N, N') = N <= N' .

    eq score(
            'decideTrue[BT, NT, OIDT, OT, CT], D
        ) = scoreConf((OT, CT)) .
    eq score(
            'decideFalse[BT, NT, OIDT, OT, CT], D
        ) = scoreConf((OT, CT)) .
    eq score(
            'updateTrue[BT, NT, OIDT, OT, CT], D
        ) = scoreConf((OT, CT)) .
    eq score(
            'updateFalse[BT, NT, OIDT, OT, CT], D
        ) = scoreConf((OT, CT)) .

    eq score(
        '`{_`,_`,_`}[T, OIDT, NETL], D
    ) = scoreConf(NETL) .

    op scoreConf : NeTermList -> Score .

    eq scoreConf('__[NETL]) = scoreConf(NETL) .
    eq scoreConf((T, NETL)) 
    = scoreConf(T) + scoreConf(NETL) .


    eq scoreConf(T) = 0 [owise] .

    *** auxiliary functions
    op toNumber : Term -> Int .
    eq toNumber('0.Nat2) = 0 .
    eq toNumber('s.Nat2) = 1 .
    eq toNumber(T) = 0 [owise] .
    eq toNumber('__[NETL]) = countS(NETL) .

    op countS : NeTermList -> Int .
    eq countS('s.Nat2) = 1 .
    eq countS(T) = 0 [owise] .
    eq countS((T, NETL)) = countS(T) + countS(NETL) .
endm

mod SCORE2 is
    including SCORE-BASE .

    vars NT OT CT ST : Term .
    var NETL : NeTermList .

    eq scoreConf('<_:_|_>[OT, CT, 
        '_`,_['status`:_['_`,_[NT, ST]], NETL]
    ]) 
    =  1 . 

    eq scoreConf('multicast_from_to_[NETL]) 
    = 0 .
endm

mod SCORE3 is
    including SCORE-BASE .

    vars NT OT CT ST : Term .
    var NETL : NeTermList .

    eq scoreConf('<_:_|_>[OT, CT, 
        '_`,_['status`:_['_`,_[NT, ST]], NETL]
    ]) 
    =  100 + 10 * max(2, toNumber(NT)) .

    eq scoreConf('multicast_from_to_[NETL]) 
    = -1 .
endm