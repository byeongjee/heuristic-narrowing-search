load ../main.maude

red in TEST-1 : 
heuristic-narrow {filter delay} in 'ONETHIRDRULE-ANALYSIS : 
      init3(s, s ; s s, O1, O2, O3, R, V1, V2, V3)
  =>* {s, s ; s s, O1 ; O2 ; O3, 
               < O  : Node | decision : s, ATTS >
               < O' : Node | decision : s s, ATTS' > CF}
  such that noDupl(O1 ; O2 ; O3) 
            and checkVoteMaps((s ; s s), getVoteMaps(INITIAL)) .

do clear memo .

red in TEST-2 : 
heuristic-narrow {filter delay} in 'ONETHIRDRULE-ANALYSIS : 
      init3(s, s ; s s, O1, O2, O3, R, V1, V2, V3)
  =>* {s, s ; s s, O1 ; O2 ; O3, 
               < O  : Node | decision : s, ATTS >
               < O' : Node | decision : s s, ATTS' > CF}
  such that noDupl(O1 ; O2 ; O3) 
            and checkVoteMaps((s ; s s), getVoteMaps(INITIAL)) .

do clear memo .

red in TEST-3 : 
 such that noDupl(O1 ; O2 ; O3) and twoVoteMapEntry(INITIAL) .
heuristic-narrow {filter delay} in 'ONETHIRDRULE-ANALYSIS : 
      init3(s, s ; s s, O1, O2, O3, R, V1, V2, V3)
  =>* {s, s ; s s, O1 ; O2 ; O3, 
               < O  : Node | decision : s, ATTS >
               < O' : Node | decision : s s, ATTS' > CF}
  such that noDupl(O1 ; O2 ; O3) 
            and checkVoteMaps((s ; s s), getVoteMaps(INITIAL)) .

do clear memo .

red in TEST-G : 
heuristic-narrow {filter delay} in 'ONETHIRDRULE-ANALYSIS : 
      init3(s, s ; s s, O1, O2, O3, R, V1, V2, V3)
  =>* {s, s ; s s, O1 ; O2 ; O3, 
               < O  : Node | decision : s, ATTS >
               < O' : Node | decision : s s, ATTS' > CF}
  such that noDupl(O1 ; O2 ; O3) 
            and checkVoteMaps((s ; s s), getVoteMaps(INITIAL)) .

do clear memo .

red in TEST-BFS : 
heuristic-narrow {filter delay} in 'ONETHIRDRULE-ANALYSIS : 
      init3(s, s ; s s, O1, O2, O3, R, V1, V2, V3)
  =>* {s, s ; s s, O1 ; O2 ; O3, 
               < O  : Node | decision : s, ATTS >
               < O' : Node | decision : s s, ATTS' > CF}
  such that noDupl(O1 ; O2 ; O3) 
            and checkVoteMaps((s ; s s), getVoteMaps(INITIAL)) .

do clear memo .

