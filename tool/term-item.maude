load data-structures/priority-queue.maude

--- Items in the priority queue
fmod QUEUE-ITEM is
    protecting SCORE .

    sort QItem .
    op [_,_,_,_] : Term Qid Score Nat -> QItem [ctor] .

    var T : Term .
    var N D : Nat .
    var S : Score .
    var Q : Qid .

    op getTerm : QItem -> Term .
    eq getTerm([T, Q, S, D]) = T .

    op getDepth : QItem -> Nat .
    eq getDepth([T, Q, S, D]) = D .
 
    op getScore : QItem -> Score .
    eq getScore([T, Q, S, D]) = S .
endfm


view QItem from TRIV to QUEUE-ITEM is
  sort Elt to QItem .
endv


fmod QUEUE-ITEM<= is
    protecting QUEUE-ITEM .

    vars T T' : Term .
    vars N N' D D' : Nat .
    vars S S' : Score .
    vars Q Q' : Qid .

    op _<_ : QItem QItem -> Bool .
    eq [T, Q, S, D] < [T', Q', S', D'] = le(S, S') .

    op _>_ : QItem QItem -> Bool .
    eq [T, Q, S, D] > [T', Q', S', D'] = le(S, S') .

    op _<=_ : QItem QItem -> Bool .
    eq [T, Q, S, D] <= [T', Q', S', D'] = le(S, S') .
endfm


view QItem<= from TOSET<= to QUEUE-ITEM<= is
  sort Elt to QItem .
endv


--- Terms maintained for folding purposes
fmod INDEXED-TERM is
    protecting INDEX .

    *** Nat: depth for debugging purpose
    sort IdxTerm . 
    op [_,_,_] : Term Index Nat -> IdxTerm .
endfm


view IdxTerm from TRIV to INDEXED-TERM is
  sort Elt to IdxTerm .
endv

