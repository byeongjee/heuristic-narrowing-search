load data-structures/priority-queue.maude

--- Items in the priority queue
fmod TERM-ITEM is
    protecting SCORE .

    --- resulting term, label, term, constraint, variable prefix, score, depth
    sort TermItem .
    op [_,_,_,_,_] : Term Term Qid Score Nat -> TermItem [ctor] .

    var T I : Term .
    var N D : Nat .
    var S : Score .
    var Q : Qid .

    op getTerm : TermItem -> Term .
    eq getTerm([T, I, Q, S, D]) = T .

    op getDepth : TermItem -> Nat .
    eq getDepth([T, I, Q, S, D]) = D .
 
    op getScore : TermItem -> Score .
    eq getScore([T, I, Q, S, D]) = S .
endfm


view TermItem from TRIV to TERM-ITEM is
  sort Elt to TermItem .
endv


fmod TERM-ITEM<= is
    protecting TERM-ITEM .

    vars T T' I I' : Term .
    vars N N' D D' : Nat .
    vars S S' : Score .
    vars Q Q' : Qid .

    op _<_ : TermItem TermItem -> Bool .
    eq [T, I, Q, S, D] < [T', I', Q', S', D'] = le(S, S') .

    op _>_ : TermItem TermItem -> Bool .
    eq [T, I, Q, S, D] > [T', I', Q', S', D'] = le(S, S') .

    op _<=_ : TermItem TermItem -> Bool .
    eq [T, I, Q, S, D] <= [T', I', Q', S', D'] = le(S, S') .
endfm


view TermItem<= from TOSET<= to TERM-ITEM<= is
  sort Elt to TermItem .
endv


--- Terms maintained for folding purposes
fmod INDEXED-TERM is
    protecting INDEX .

    *** Nat: depth for debugging purpose
    sort IndexedTerm . 
    op {_,_,_,_} : Term Term Index Nat -> IndexedTerm .
endfm


view IndexedTerm from TRIV to INDEXED-TERM is
  sort Elt to IndexedTerm .
endv

