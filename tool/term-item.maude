load data-structures/priority-queue.maude

--- Terms maintained for folding purposes
fmod INDEXED-TERM is
    protecting INDEX .

    sort IdxTerm . 
    op [_,_] : Term Index -> IdxTerm .
endfm


view IdxTerm from TRIV to INDEXED-TERM is
  sort Elt to IdxTerm .
endv


--- Items in the priority queue
fmod QUEUE-ITEM is
    protecting SCORE .
    protecting INDEXED-TERM .

    sort QItem .
    op [_,_,_,_] : IdxTerm Score Qid Nat -> QItem [ctor] .

    var IT : IdxTerm .
    var D : Nat .
    var S : Score .
    var Q : Qid .

    op getDepth : QItem -> Nat .
    eq getDepth([IT, S, Q, D]) = D .
 
    op getScore : QItem -> Score .
    eq getScore([IT, S, Q, D]) = S .
endfm


view QItem from TRIV to QUEUE-ITEM is
  sort Elt to QItem .
endv


fmod QUEUE-ITEM<= is
    protecting QUEUE-ITEM .

    vars IT IT' : IdxTerm .
    vars Q Q' : Qid .
    vars S S' : Score .
    vars D D' : Nat .

    op _>_ : QItem QItem -> Bool .
    eq [IT, S, Q, D] > [IT', S', Q', D'] = S gt S' .

    ---FIXME: < vs le ?
    op _<_ : QItem QItem -> Bool .
    eq [IT, S, Q, D] < [IT', S', Q', D'] = S le S' .

    op _<=_ : QItem QItem -> Bool .
    eq [IT, S, Q, D] <= [IT', S', Q', D'] = S le S' .
endfm


view QItem<= from TOSET<= to QUEUE-ITEM<= is
  sort Elt to QItem .
endv


