load term-item.maude


fmod HNR-TOP is
    including STATE .
    sort Top .
    op _|||_ : State Bool -> Top [ctor] .
    op bot : -> Top [ctor] .
    eq S:State ||| false = bot .
endfm



fmod FOLDING-APPLICATION is
    protecting META-LEVEL .
    protecting SET{IdxTerm} * 
    (op _,_ : Set{IdxTerm} Set{IdxTerm} -> Set{IdxTerm} to _;_) .
    protecting SET{QItem} *
    (op _,_ : Set{QItem} Set{QItem} -> Set{QItem} to _;_) .
    protecting CONVERSION .

    var M : Module .
    var IT : IdxTerm .
    var ITS : Set{IdxTerm} .
    var ITEMS : Set{QItem} .
    vars T T' T1 T2 T3 T4 T5 : Term . 
    var IDX : Index . 
    vars SC SC' : Score .
    vars D D' N : Nat .
    vars Q Q' : Qid .
    var SUB : Substitution . 

    sort FoldingState .
    op {_,_} : Set{IdxTerm} Set{QItem} -> FoldingState [ctor] .

    --- remove all subsumed items
    op folding : Module Set{QItem} Set{IdxTerm} -> FoldingState .
    eq folding(M, ITEMS, ITS) = foldingS(M, {ITS, foldingT(M, ITEMS)}) .

    op foldingT : Module Set{QItem} -> Set{QItem} .
    ceq foldingT(M, ITEMS ; [[T,IDX],SC,Q,D] ; [[T',IDX],SC',Q',D'])
      = foldingT(M, ITEMS ; [[T,IDX],SC,Q,D])
     if subsume(M, T, T') .
    eq foldingT(M, ITEMS) = ITEMS [owise] .

    op foldingS : Module FoldingState -> FoldingState .
    ceq foldingS(M, {[T,IDX] ; ITS, ITEMS ; [[T',IDX], SC, Q, D]}) 
      = foldingS(M, {[T,IDX] ; ITS, ITEMS})
     if subsume(M, T, T') .
    eq foldingS(M, {ITS, ITEMS}) = {insertAll(ITEMS,ITS), ITEMS} [owise] .

    --- add all remaining items (renaming is not needed for matching)
    op insertAll : Set{QItem} Set{IdxTerm} -> Set{IdxTerm} .
    eq insertAll([IT, SC, Q, D] ; ITEMS, ITS)
     = insertAll(ITEMS, ITS ; IT) .
    eq insertAll(empty, ITS) = ITS .

    op subsume : Module Term Term -> Bool [memo] .
    op subsume : Module Term Term Nat -> Bool .
    eq subsume(M, T, T') = subsume(M, T, T', 0) .
    ceq subsume(M, '_|||_[T1,T2], '_|||_[T3,T4], N) 
      = if T5  == 'true.Bool then true
        else subsume(M, '_|||_[T1,T2], '_|||_[T3,T4], s(N)) fi
     if SUB := metaMatch(M,T1,T3,nil,N) 
     /\ T5 := getTerm(metaReduce(M, '_implies_[T4,applySubstitution(M,T2,SUB)])) .
    eq subsume(M, T, T', N) = false [owise] .
endfm


fmod NARROWING-TRANSITION is
    protecting META-LEVEL .
    protecting SET{QItem} *
    (op _,_ : Set{QItem} Set{QItem} -> Set{QItem} to _;_) .

    var M : Module .
    var OPT : VariantOptionSet .
    vars T T' T1 T2 : Term .
    var IDX : Index . 
    var SC : Score .
    var ITEMS : Set{QItem} .
    vars D N : Nat .
    var TY : Type . 
    var CXT : Context . 
    vars Q L : Qid . 
    vars SUB SUB' : Substitution .
    var NAR : NarrowingApplyResult .

    --- obtain the set of next symbolic states
    op next : Module VariantOptionSet QItem -> Set{QItem} .
    eq next(M, OPT, [[T,IDX],SC,Q,D]) = next(M, OPT, T, Q, D, 0, empty) .

    op next : Module VariantOptionSet Term Qid Nat Nat Set{QItem} -> Set{QItem} .
    ceq next(M, OPT, T, Q, D, N, ITEMS) 
      = next(M, OPT, T, Q, D, s(N), ITEMS ; filter(M,NAR,D))
     if NAR := metaNarrowingApply(M, T, empty, Q, OPT, N) .
    eq next(M, OPT, T, Q, D, N, ITEMS) = ITEMS [owise] .

    --- remove invalid states
    op filter : Module NarrowingApplyResult Nat -> Set{QItem} .
    ceq filter(M, {'_|||_[T1,T2],TY,CXT,L,SUB,SUB',Q}, D) 
      = if T' == 'bot.Top then empty
        else makeItem(idxState(T'), Q, s(D)) fi
     if T' := getTerm(metaReduce(M, '_|||_[T1,'_and_[T2,'inv[T1]]])) .
    eq filter(M, {'bot.Top,TY,CXT,L,SUB,SUB',Q}, D) = empty .

    op idxState : Term -> IdxTerm .
    eq idxState('_|||_[T1,T2]) = ['_|||_[T1,T2], index(T1)] .

    op makeItem : IdxTerm Qid Nat -> QItem .
    eq makeItem(['_|||_[T1,T2], IDX], Q, D) 
     = [['_|||_[T1,T2], IDX], score(T1,D), Q, D] .
endfm


fmod SUBSTITUTION-RESTRICTION is
  protecting META-LEVEL .

  op getVars : NeTermList -> QidSet .
  op _|_ : Substitution QidSet -> Substitution .

  var F : Qid .
  var NETL : NeTermList .
  var T : Term .
  var X : Variable .
  var SUB : Substitution .
  var VARS : QidSet .

  eq getVars(F[NETL]) = getVars(NETL) .
  eq getVars((T, NETL)) = getVars(T) ; getVars(NETL) .
  eq getVars(X) = X .
  eq getVars(T) = none [owise] .

  eq none | VARS = none .
  eq (X <- T ; SUB) | (X ; VARS) = (X <- T) ; (SUB | (X ; VARS)) .
  eq (X <- T ; SUB) | VARS = SUB | VARS [owise] .
endfm


fmod HEURISTIC-NARROWING-SEARCH is
    protecting SCORE .
    protecting NARROWING-TRANSITION .
    protecting FOLDING-APPLICATION .
    protecting LEFTIST-TREES{QItem<=} .
    protecting SUBSTITUTION-RESTRICTION .

    var M : Module .
    vars T T' T1 : Term .
    vars N D : Nat . 
    var SC : Score .
    var IDX : Index . 
    var OPT : VariantOptionSet .
    vars ITS ITS' : Set{IdxTerm} .
    var ITEM : QItem .
    vars ITEMS ITEMS' : Set{QItem} .
    vars Q Q' : Qid .
    var SUB : Substitution . 
    var QUE : LTree{QItem<=} .
    var NQUE : NeLTree{QItem<=} .

    sorts HNSState .
    op {_,_} : LTree{QItem<=} Set{IdxTerm} -> HNSState [ctor] .

    --- hns result
    sorts MetaHNSResult .
    op hnsFailure : Nat -> MetaHNSResult [ctor] .
    op hnsSuccess : CheckSolResult QItem Nat -> MetaHNSResult [ctor] .

    op hnSearch : Module VariantOptionSet Term Term -> MetaHNSResult .
    eq hnSearch(M, OPT, T, T') 
     = hnsOuter(M, OPT, T', {insert(makeItem(idxState(T),'@,0),empty), idxState(T)}) .

    op hnsOuter : Module VariantOptionSet Term HNSState -> MetaHNSResult .
    ceq hnsOuter(M, OPT, T', {NQUE, ITS})
      = if checkSol(M,OPT, T',ITEM) :: NeCheckSolResult
        then hnsSuccess(checkSol(M,OPT, T',ITEM), ITEM, | ITS |) 
        else hnsOuter(M, OPT, T', hnsInner(M, OPT, {deleteMin(NQUE), ITS}, ITEM)) fi
     if ITEM := findMin(NQUE) [print "current term item: " ITEM] .
    eq hnsOuter(M, OPT, T', {empty, ITS}) = hnsFailure(| ITS |) .

    op hnsInner : Module VariantOptionSet HNSState QItem -> HNSState .
   ceq hnsInner(M, OPT, {QUE, ITS}, ITEM) = {insertAll(ITEMS', QUE), ITS'} 
     if {ITS', ITEMS'} := folding(M, next(M, OPT, ITEM), ITS) .

    --- insert a set of items into the queue
    op insertAll : Set{QItem} LTree{QItem<=} -> LTree{QItem<=} .
    eq insertAll(empty, QUE) = QUE .
    eq insertAll(ITEM ; ITEMS, QUE) = insertAll(ITEMS, insert(ITEM, QUE)) .

--- check if a goal is reached
    sorts CheckSolResult NeCheckSolResult .
    subsort NeCheckSolResult < CheckSolResult .
    op [_,_] : Term Substitution -> NeCheckSolResult [ctor] .
    op none : -> CheckSolResult [ctor] .

    op checkSol : Module VariantOptionSet Term QItem -> CheckSolResult .
    op checkSol : Module VariantOptionSet Term Term Qid Nat -> CheckSolResult .

    eq checkSol(M, OPT, T', [[T,IDX],SC,Q,D]) = checkSol(M, OPT, T, T', Q, 0) .
    ceq checkSol(M, OPT, T, T', Q, N) 
      = if T1 =/= 'false.Bool then [applySubstitution(M,T,SUB), SUB | getVars(T')]
        else checkSol(M, OPT, T, T', Q, s(N)) fi
     if {'PHI:Bool <- T1 ; SUB, Q'} := metaVariantUnify(M, T =? T', empty, Q, OPT, N) .
    eq checkSol(M, OPT, T, T', Q, N) = none [owise] .
endfm




fmod HEURISTIC-NARROWING-DRIVER is
    including HNR-TOP .
    protecting HEURISTIC-NARROWING-SEARCH .

    var M : Module .
    var OPT : VariantOptionSet .
    var Q : Qid .
    vars ST ST' : State .
    var B : Bool .
    var N : Nat . 
    var SC : Score .
    vars T T' : Term .
    var ITEM : QItem .
    var H : Header .
    vars IL IL' : ImportList .
    var SS : SortSet .
    var SSDS : SubsortDeclSet .
    var OPDS : OpDeclSet .
    var MAS : MembAxSet .
    var EQS : EquationSet .
    var RLS : RuleSet .
    var SUB : Substitution .

    sort HNSResult .
    op _substitution:_states:_(score:_, depth:_) : Top Substitution Nat Score Nat -> HNSResult [ctor format (d n d n d s d d d s d d d)] .
    op noSolution : Nat -> HNSResult [ctor] .

    op heuristic-narrow{_}in_:_=>*_such`that_ : VariantOptionSet Qid State State Bool -> HNSResult [prec 125] .
   ceq heuristic-narrow {OPT} in Q : ST =>* ST' such that B
     = prettyPrint(hnSearch(M, OPT, T, T'))
     if M := addImports((including 'HNR-TOP .), upModule(Q,false))
     /\ T  := '_|||_[upTerm(ST),  upTerm(B)]
     /\ T' := '_|||_[upTerm(ST'), 'PHI:Bool] .

    ---
    op prettyPrint : MetaHNSResult -> HNSResult .
    eq prettyPrint(hnsSuccess([T, SUB],ITEM,N)) 
     = downTerm(T,bot) substitution: SUB states: N (score: getScore(ITEM), depth: getDepth(ITEM)) .
    eq prettyPrint(hnsFailure(N)) = noSolution(N) .

    ---
    op addImports : ImportList Module -> Module .
    eq addImports(IL', mod H is IL sorts SS . SSDS OPDS MAS EQS RLS endm)
     = (mod H is IL IL' sorts SS . SSDS OPDS MAS EQS RLS endm) .
endfm

