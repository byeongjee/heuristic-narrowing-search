load priority-queue.maude

fmod SCORE is
  protecting META-LEVEL .
  protecting INT .

  op score : Term Nat -> Int .

  vars T BT NT OT CT ST : Term .
  var D : Nat .
  var NETL : NeTermList .

  eq score(
        'decideTrue[BT, NT, OT, CT], D
    ) = scoreConf((OT, CT)) .
  eq score(
        'decideFalse[BT, NT, OT, CT], D
    ) = scoreConf((OT, CT)) .
  eq score(
        'updateTrue[BT, NT, OT, CT], D
    ) = scoreConf((OT, CT)) .
  eq score(
        'updateFalse[BT, NT, OT, CT], D
    ) = scoreConf((OT, CT)) .

  eq score(
      '`{_`,_`}[T, NETL], D
  ) = scoreConf(NETL) .

  op scoreConf : NeTermList -> Int .

  eq scoreConf('__[NETL]) = scoreConf(NETL) .
  eq scoreConf((T, NETL)) 
  = scoreConf(T) + scoreConf(NETL) .

***(
    score 1
)

***(
    score 2
)

*** score 3
  eq scoreConf('<_:_|_>[OT, CT, 
      '_`,_['status`:_['_`,_[NT, ST]], NETL]
  ]) 
  =  100 + 10 * max(2, toNumber(NT)) .

  eq scoreConf('multicast_from_to_[NETL]) 
  = -1 .

  eq scoreConf(T) = 0 [owise] .

  *** auxiliary functions
  op toNumber : Term -> Int .
  eq toNumber('0.Nat2) = 0 .
  eq toNumber('s.Nat2) = 1 .
  eq toNumber(T) = 0 [owise] .
  eq toNumber('__[NETL]) = countS(NETL) .

  op countS : NeTermList -> Int .
  eq countS('s.Nat2) = 1 .
  eq countS(T) = 0 [owise] .
  eq countS((T, NETL)) = countS(T) + countS(NETL) .
endfm


fmod TERM-ITEM is
    protecting META-LEVEL .
    protecting NAT .
    protecting QID .

    sort TermItem .

    op <_,_,_,_,_> : Term Term Qid Nat Nat -> TermItem [ctor] .

    vars T T' I I' : Term .
    vars N N' D D' : Nat .
    vars Q Q' : Qid .

    op _<_ : TermItem TermItem -> Bool .
    eq < T, I, Q, N, D > < < T', I', Q', N', D' > = N <= N' .

    op _>_ : TermItem TermItem -> Bool .
    eq < T, I, Q, N, D > > < T', I', Q', N', D' > = N <= N' .

    op _<=_ : TermItem TermItem -> Bool .
    eq < T, I, Q, N, D > <= < T', I', Q', N', D' > = N <= N' .

endfm

fmod INDEXED-TERM-SET is
    protecting META-LEVEL .

    sort Index .
    op index : Qid Nat Nat -> Index [ctor] .

    sort IndexedTerm . *** Nat is depth for debugging purpose
    op `{_`,_`,_`} : Term Index Nat -> IndexedTerm .

    vars T NT T' T'' : Term .
    vars NETL NETL' : NeTermList .
    var N : Nat .

    op createIndex : Term -> Index .
    op createNumMsgsAndObjs : Qid NeTermList -> Index .
    eq createIndex(T) = createNumMsgsAndObjs(getTopSymbol(T), getConfig(T)) .
    eq createNumMsgsAndObjs(Q, NETL) = index(Q, getNumMsgs(NETL), getNumObjs(NETL)) .

    op getTopSymbol : Term -> Qid .
    ops getNumMsgs getNumObjs : NeTermList -> Nat .
    eq getNumMsgs('multicast_from_to_[NETL]) = 1 .
    eq getNumMsgs(T) = 0 [owise] .
    eq getNumMsgs((T,  NETL')) = getNumMsgs(T) + getNumMsgs(NETL') .
    eq getNumObjs('<_:_|_>[NETL]) = 1 .
    eq getNumObjs(T) = 0 [owise] .
    eq getNumObjs((T,  NETL')) = getNumObjs(T) + getNumObjs(NETL') .

    op getConfig : Term -> NeTermList .
    eq getConfig('decideTrue[T, NT, T', T'']) = (T', getConfig(T'')) .
    eq getConfig('decideFalse[T, NT, T', T'']) = (T', getConfig(T'')) .
    eq getConfig('updateTrue[T, NT, T', T'']) = (T', getConfig(T'')) .
    eq getConfig('updateFalse[T, NT, T', T'']) = (T', getConfig(T'')) .
    eq getConfig('`{_`,_`}[NT, T]) = getConfig(T) .
    eq getConfig('__[NETL]) = NETL .

    var Q : Qid .

    eq getTopSymbol(Q[NETL]) = Q .


    sort IndexedTermSet .
    subsort IndexedTerm < IndexedTermSet .

    op empty : -> IndexedTermSet [ctor] .
    op _`,_ : IndexedTermSet IndexedTermSet -> IndexedTermSet [ctor assoc comm id: empty] .

    op termSetSize : IndexedTermSet -> Nat .
    var IDX_T : IndexedTerm .
    var IDX_TS : IndexedTermSet .
    eq termSetSize(IDX_T) = 1 .
    eq termSetSize(IDX_T, IDX_TS) = 1 + termSetSize(IDX_TS) .
    eq termSetSize(empty) = 0 .
endfm

fmod TERM-ITEM-SET is 
    protecting TERM-ITEM .

    sort TermItemSet .
    subsort TermItem < TermItemSet .

    op emptyTermItemSet : -> TermItemSet [ctor] .
    op _;;_ : TermItemSet TermItemSet -> TermItemSet [ctor assoc comm id: emptyTermItemSet] .

    var T : TermItem .
    var TIS : TermItemSet .

    op length : TermItemSet -> Nat .
    eq length(emptyTermItemSet) = 0 .
    eq length(T ;; TIS) = 1 + length(TIS) .
endfm


view TermItem from TOSET<= to TERM-ITEM is
  sort Elt to TermItem .
endv


mod HEURISTIC-NARROWING is
    protecting SCORE .
    protecting INDEXED-TERM-SET .
    protecting TERM-ITEM-SET .
    protecting LEFTIST-TREES{TermItem} .
    protecting CONVERSION .


    sort HeuristicNarrowingSearchResult .
    op noSolution : Nat -> HeuristicNarrowingSearchResult [ctor] .
    op sol : Term Nat -> HeuristicNarrowingSearchResult [ctor] .

    *** module, initial term, goal term, variant option set 
    op metaHeuristicNarrowingSearch : Module Term Term VariantOptionSet -> HeuristicNarrowingSearchResult .

    *** module, initial term, goal term, variant option set, pending, most general so far
    op metaHeuristicNarrowingSearchInternal : Module Term Term VariantOptionSet LTree{TermItem} IndexedTermSet -> HeuristicNarrowingSearchResult .

    var M : Module .
    vars T T' T'' S I I' : Term .
    vars N D D' SOLN : Nat .
    var VOS : VariantOptionSet .
    var IDX_T : IndexedTerm .
    vars IDX_TS MOST_GENERAL_SO_FAR MOST_GENERAL_SO_FAR' MOST_GENERAL_SO_FAR'' : IndexedTermSet .
    var IDX : Index .
    vars TI SOL : TermItem .
    vars TIS FILTERED CHILDREN : TermItemSet .
    var TY' : Type . var CO : Context . vars RULE_LABEL Q Q' F : Qid . vars S1 S2 : Substitution .
    var C : Constant . var NETL : NeTermList .  var B : Bool .
    vars QUEUE QUEUE' : LTree{TermItem} .


    op _isSubsumedBy_under_ : IndexedTerm IndexedTermSet Module -> Bool  .
    eq {T, IDX, D} isSubsumedBy ({T', IDX, D'}, IDX_TS) under M
    = (metaMatch(M, T', T, nil, 0) =/= noMatch) or-else (({T, IDX, D}) isSubsumedBy IDX_TS under M) .
    eq IDX_T isSubsumedBy IDX_TS under M = false [owise] .


    op rename : IndexedTerm -> IndexedTerm .
    eq rename({T, IDX, D}) = {rename(T, D), IDX, D} .

    var V : Variable .
    op rename : NeTermList Nat -> NeTermList .
    eq rename(V, D) = qid("$" + string(D, 10) + string(V)) . 
    eq rename(C, D) = C .
    eq rename(F[NETL], D) = F[rename(NETL, D)] .
    eq rename((T, NETL), D) = rename(T, D) , rename(NETL, D) .



    op metaAnd : Term Term -> Term .
    eq metaAnd(T, T') = '_and_[T, T'] .

    ops metaWrapInvariant metaWrapInitialInvariant : Term -> Term .
    eq metaWrapInvariant(T) = 'invariant[T] .
    eq metaWrapInitialInvariant(T) = 'initialInvariant[T] .



    sort InsertStateResult .
    subsort IndexedTermSet < InsertStateResult .
    op subsumed : -> InsertStateResult [ctor] .
    op insertState : Module IndexedTerm IndexedTermSet -> InsertStateResult .
    op insertStateInternal : IndexedTerm IndexedTermSet Bool -> InsertStateResult .


    eq insertState(M, IDX_T, IDX_TS)
    = insertStateInternal(IDX_T, IDX_TS, IDX_T isSubsumedBy IDX_TS under M) .

    eq insertStateInternal(IDX_T, IDX_TS, true) = subsumed .
    eq insertStateInternal({T, IDX, D}, IDX_TS, false) = rename({T, IDX, D}), IDX_TS 
    .

    op getChildren : Module TermItem VariantOptionSet -> TermItemSet [memo] .
    op getChildrenInternal : Module TermItem VariantOptionSet Nat -> TermItemSet .
    op checkNarrowingResult : Module TermItem VariantOptionSet Nat NarrowingApplyResult? -> TermItemSet .

    eq getChildren(M, TI, VOS) = getChildrenInternal(M, TI, VOS, 0) .

    eq getChildrenInternal(M, < T, I, Q, N, D >, VOS, SOLN) 
    = checkNarrowingResult(M, < T, I, Q, N, D >, VOS, SOLN, metaNarrowingApply(M, T, empty, Q, VOS, SOLN)) .

    eq checkNarrowingResult(M, TI, VOS, SOLN, failure) = emptyTermItemSet .
    eq checkNarrowingResult(M, TI, VOS, SOLN, failureIncomplete) = emptyTermItemSet [print "incomplete narrowing"] .
    eq checkNarrowingResult(M, < T, I, Q, N, D >, VOS, SOLN, 
        {T', TY', CO, RULE_LABEL, S1, S2, Q'}) 
    = < T', 
        getTerm(metaReduce(M, metaAnd(applySubstitution(M, I, S1), metaWrapInvariant(T')))),
        Q', 
        score(T', D + 1), 
        D + 1 > ;; getChildrenInternal(M, < T, I, Q, N, D >, VOS, SOLN + 1) .


    *** filtered children, new most general so far
    sort ProcessChildrenResult .
    op {_,_} : TermItemSet IndexedTermSet -> ProcessChildrenResult [ctor] .

    *** module, children, most general so far
    op processChildren : Module TermItemSet IndexedTermSet -> ProcessChildrenResult .
    op processChildrenInternal : Module TermItemSet IndexedTermSet InsertStateResult -> ProcessChildrenResult .

    eq processChildren(M, emptyTermItemSet, MOST_GENERAL_SO_FAR) = {emptyTermItemSet, MOST_GENERAL_SO_FAR} .

    eq processChildren(M, < T, 'false.Bool, Q, N, D > ;; TIS, MOST_GENERAL_SO_FAR) 
    = processChildren(M, TIS, MOST_GENERAL_SO_FAR) .

    eq processChildren(M, < T, I, Q, N, D > ;; TIS, MOST_GENERAL_SO_FAR) 
    = processChildrenInternal(M, < T, I, Q, N, D > ;; TIS, MOST_GENERAL_SO_FAR,
    insertState(M,  {T, createIndex(T), D}, MOST_GENERAL_SO_FAR)) .

    eq processChildrenInternal(M, < T, I, Q, N, D > ;; TIS, MOST_GENERAL_SO_FAR, subsumed)
    = processChildren(M, TIS, MOST_GENERAL_SO_FAR) .

    ceq processChildrenInternal(M, < T, I, Q, N, D > ;; TIS, MOST_GENERAL_SO_FAR, MOST_GENERAL_SO_FAR')
    = {< T, I, Q, N, D > ;; FILTERED, MOST_GENERAL_SO_FAR''}
    if I =/= 'false.Bool 
    /\ {FILTERED, MOST_GENERAL_SO_FAR''} := processChildren(M, TIS, MOST_GENERAL_SO_FAR') .


    var UP : UnificationPair .

    op isSolution : Module TermItem Term -> Bool .

    ceq isSolution(M, < T, I, Q, N, D >, T') = true
    if UP := metaUnify(M, T =? T', Q, 0) 
    /\ getTerm(metaReduce(M, applySubstitution(M, I, getSubstitution(UP)))) =/= 'false.Bool .

    eq isSolution(M, TI, T') = false [owise] .

    op insertAll : TermItemSet LTree{TermItem} -> LTree{TermItem} .
    eq insertAll(emptyTermItemSet, QUEUE) = QUEUE .
    eq insertAll(TI ;; TIS, QUEUE) = insertAll(TIS, insert(TI, QUEUE)) .

    eq metaHeuristicNarrowingSearch(M, T, T', VOS)
    = metaHeuristicNarrowingSearchInternal(M, T, T', VOS, insert(< T, metaWrapInitialInvariant(T), '@, score(T, 0), 0 >, empty), empty) .

    ceq metaHeuristicNarrowingSearchInternal(M, T, T', VOS, QUEUE, MOST_GENERAL_SO_FAR)
    = checkSolution(M, T, T', VOS, QUEUE, MOST_GENERAL_SO_FAR, TI, isSolution(M, TI, T'))
    if TI := findMin(QUEUE) .

    op checkSolution : Module Term Term VariantOptionSet LTree{TermItem} IndexedTermSet TermItem Bool -> HeuristicNarrowingSearchResult .

    eq checkSolution(M, T, T', VOS, QUEUE, MOST_GENERAL_SO_FAR, < T'', I, Q, N, D >, true)
    = sol(T'', termSetSize(MOST_GENERAL_SO_FAR)) .

    ceq checkSolution(M, T, T', VOS, QUEUE, MOST_GENERAL_SO_FAR, TI, false)
    = metaHeuristicNarrowingSearchInternal(M, T, T', VOS, QUEUE' , MOST_GENERAL_SO_FAR') 
    if {FILTERED, MOST_GENERAL_SO_FAR'} := processChildren(M, getChildren(M, TI, VOS), MOST_GENERAL_SO_FAR)
    /\ QUEUE' := insertAll(FILTERED, deleteMin(QUEUE)) [print "TI: " TI] .

    eq metaHeuristicNarrowingSearchInternal(M, T, T', VOS, empty, MOST_GENERAL_SO_FAR)
    = noSolution(termSetSize(MOST_GENERAL_SO_FAR)) .

endm