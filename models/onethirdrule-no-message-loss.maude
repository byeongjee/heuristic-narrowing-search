load ./onethirdrule-base.maude

set include BOOL off .


mod ONETHIRDRULE-NO-MESSAGE-LOSS is
    including ONETHIRDRULE-BASE .

    vars O O' : Oid . vars CONF : Configuration . var M : Msg . var C : Cid .
    vars OIDS OIDS' : OidSet . 
    var R N N' VT VF VA : Nat .
    var Z : Zero .
    vars V : Value .

    op decideTrue : Bool' Nat OidSet Object Configuration -> State [ctor] .
    op decideFalse : Bool' Nat OidSet Object Configuration -> State [ctor] .
    op updateTrue : Bool' Nat OidSet Object Configuration -> State [ctor] .
    op updateFalse : Bool' Nat OidSet Object Configuration -> State [ctor] .

    op _<=_ : Nat Nat -> Bool' .
    eq N <= N N' = true [variant] .

    rl [decideTrue-1] :
    {N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S > 
        CONF
    }
    =>
    decideTrue(N <= VT,
        N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S >,
        CONF
    ) [narrowing] .

    rl [decideTrue-2] :
    decideTrue(true,
        N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, ATTS:U24S >,
        CONF
    ) 
    =>
    {N, OIDS,
        < O : Node | status : (R, finished), decision : true, ATTS:U24S  >
        CONF
    } [narrowing] .

    rl [decideFalse-1] :
    {N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S > 
        CONF
    }
    =>
    decideFalse(N <= VF,
        N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S >,
        CONF
    ) [narrowing] .

    rl [decideFalse-2] :
    decideFalse(true,
        N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U24S >,
        CONF)
    =>
    {N, OIDS,
        < O : Node | status : (R, finished), decision : false, votes : (VT, VF, VA), ATTS:U24S >
        CONF
    } [narrowing] .

    rl [updateTrue-1] : 
    {N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S >
        CONF
    }
    =>
    updateTrue(
        (s VT <=  N) and (N <= VA) and (VF <= VT),
        N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S >,
        CONF
    ) [narrowing] .

    rl [updateTrue-2] : 
    updateTrue(
        true,
        N, OIDS,
        < O : Node | status : (R, waiting), value : V, decision : nil, votes : (VT, VF, VA) >,
        CONF
    )
    =>
    {N, OIDS,
        < O : Node | status : (s R, init), value : true, decision : nil, votes : (0, 0, 0) >
        CONF
    } [narrowing] .

    rl [updateFalse-1] : 
    {N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA) >
        CONF
    }
    =>
    updateFalse(
        (s VF <= N) and (N <= VA) and (s VT <= VF),
        N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA) >,
        CONF
    ) [narrowing] .

    rl [updateFalse-2] : 
    updateFalse(
        true,
        N, OIDS,
        < O : Node | status : (R, waiting), value : V, decision : nil, votes : (VT, VF, VA) >,
        CONF
    )
    =>
    {N, OIDS,
        < O : Node | status : (s R, init), value : false, decision : nil, votes : (0, 0, 0) >
        CONF
    } [narrowing] .

endm

