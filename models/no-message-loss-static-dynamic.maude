load ./onethirdrule-base.maude


mod NO-MESSAGE-LOSS-STATIC-DYNAMIC is
    including ONETHIRDRULE-BASE .

    vars O O' : Oid . vars CONF : Configuration . var M : Msg . var C : Cid .
    vars OIDS OIDS' : OidSet . 
    var R N N' VT VF VA : Nat .
    var Z : Zero .
    vars V : Value .

    rl [vote-true-new] : 
    {N, O ; OIDS,
        < O : Node | status : (0, init), value : true, decision : nil, votes : (VT, VF, VA) > 
        CONF
    }
    =>
    {N, O ; OIDS,
        < O : Node | status : (0, waiting), value : true, decision : nil, votes : (s VT, VF, s VA) > 
        (multicast trueVote(0) from O to OIDS)
        CONF
    } [narrowing] .

    rl [vote-true-existing] : 
    {N, O ; OIDS,
        < O : Node | status : (s R, init), value : true, decision : nil, votes : (VT, VF, VA) > 
        CONF
    }
    =>
    {N, O ; OIDS,
        < O : Node | status : (s R, waiting), value : true, decision : nil, votes : (s VT, VF, s VA) > 
        (multicast trueVote(s R) from O to OIDS)
        CONF
    } [narrowing] .


    rl [vote-false-new] : 
    {N, O ; OIDS,
        < O : Node | status : (0, init), value : false, decision : nil, votes : (VT, VF, VA) > 
        CONF
    }
    =>
    {N, O ; OIDS,
        < O : Node | status : (0, waiting), value : false, decision : nil, votes : (VT, s VF, s VA) > 
        (multicast falseVote(0) from O to OIDS)
        CONF
    } [narrowing] .

    rl [vote-false-existing] : 
    {N, O ; OIDS,
        < O : Node | status : (s R, init), value : false, decision : nil, votes : (VT, VF, VA) > 
        CONF
    }
    =>
    {N, O ; OIDS,
        < O : Node | status : (s R, waiting), value : false, decision : nil, votes : (VT, s VF, s VA) > 
        (multicast falseVote(s R) from O to OIDS)
        CONF
    } [narrowing] .


    rl [receive-true] :
    {N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S > 
        (multicast trueVote(R) from O' to (O ; OIDS'))
        CONF
    } =>
    {N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (s VT, VF, s VA), ATTS:U2S > 
        (multicast trueVote(R) from O' to OIDS')  
        CONF
    } [narrowing] .

    rl [receive-false] :
    {N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S > 
        (multicast falseVote(R) from O' to (O ; OIDS'))
        CONF
    } =>
    {N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, s VF, s VA), ATTS:U2S > 
        (multicast falseVote(R) from O' to OIDS')  
        CONF
    } [narrowing] .

    rl [decideTrue-1] :
    {N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S > 
        CONF
    }
    =>
    decideTrue(N <= VT,
        N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S >,
        CONF
    ) [narrowing] .

    rl [decideTrue-2] :
    decideTrue(true,
        N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, ATTS:U24S >,
        CONF
    ) 
    =>
    {N, OIDS,
        < O : Node | status : (R, finished), decision : true, ATTS:U24S  >
        CONF
    } [narrowing] .

    rl [decideFalse-1] :
    {N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S > 
        CONF
    }
    =>
    decideFalse(N <= VF,
        N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S >,
        CONF
    ) [narrowing] .

    rl [decideFalse-2] :
    decideFalse(true,
        N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, ATTS:U24S >,
        CONF)
    =>
    {N, OIDS,
        < O : Node | status : (R, finished), decision : false, ATTS:U24S >
        CONF
    } [narrowing] .

    rl [updateTrue-1] : 
    {N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S >
        CONF
    }
    =>
    updateTrue(
        (VT <  N) and (N <= VA) and (VF <= VT),
        N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S >,
        CONF
    ) [narrowing] .

    eq [updateTrue-2] : 
    updateTrue(
        true,
        N, OIDS,
        < O : Node | status : (R, waiting), value : V, decision : nil, votes : (VT, VF, VA) >,
        CONF
    )
    =
    {N, OIDS,
        < O : Node | status : (s R, init), value : true, decision : nil, votes : (0, 0, 0) >
        CONF
    } [variant] .

    rl [updateFalse-1] : 
    {N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA) >
        CONF
    }
    =>
    updateFalse(
        (VF < N) and (N <= VA) and (VT < VF),
        N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA) >,
        CONF
    ) [narrowing] .

    eq [updateFalse-2] : 
    updateFalse(
        true,
        N, OIDS,
        < O : Node | status : (R, waiting), value : V, decision : nil, votes : (VT, VF, VA) >,
        CONF
    )
    =
    {N, OIDS,
        < O : Node | status : (s R, init), value : false, decision : nil, votes : (0, 0, 0) >
        CONF
    } [variant] .

endm

mod NO-MESSAGE-LOSS-STATIC-DYNAMIC-HALF is
    protecting NO-MESSAGE-LOSS-STATIC-DYNAMIC .
    protecting INV-HALF .
endm

mod NO-MESSAGE-LOSS-STATIC-DYNAMIC-TWOTHIRD is
    protecting NO-MESSAGE-LOSS-STATIC-DYNAMIC .
    protecting INV-TWOTHIRD .
endm