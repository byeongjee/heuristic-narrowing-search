load ./onethirdrule-base.maude


mod ONETHIRDRULE-STATIC is
    including ONETHIRDRULE-BASE .

    op [_,_] : Natural InitialStep -> InitialStatus [ctor] . 

    vars O O' : Oid . vars CONF : Configuration . var M : Msg . var C : Cid .
    vars OS OS' : OidSet . 
    var R N N' VT VF VA : Natural .
    var Z : Zero .
    vars V V' : Value .

    rl [vote] : 
    {N, O ; OS,
        < O : Node | status : [R, init], value : V, decision : nil, votes : [VT, VF, VA] > 
        CONF
    }
    =>
    {N, O ; OS,
        < O : Node | status : [R, wait], value : V, decision : nil, votes : update([VT, VF, VA], V) > 
        (multicast vote(V, R) from O to OS)
        CONF
    } [narrowing] .


    rl [receive] :
    {N, OS,
        < O : Node | status : [R, wait], decision : nil, votes : [VT, VF, VA], ATTS:U2S > 
        (multicast vote(V, R) from O' to (O ; OS'))
        CONF
    } =>
    {N, OS,
        < O : Node | status : [R, wait], decision : nil, votes : update([VT, VF, VA], V), ATTS:U2S > 
        (multicast vote(V, R) from O' to OS')  
        CONF
    } [narrowing] .

    rl [decide-1-true] :
    {N, OS,
        < O : Node | status : [R, wait], decision : nil, votes : [VT, VF, VA], ATTS:U2S > 
        CONF
    }
    =>
    decide?(true, N <= VT, N, OS, 
        < O : Node | status : [R, wait], decision : nil, votes : [VT, VF, VA], ATTS:U2S >,
        CONF
    ) [narrowing] .

    rl [decide-1-true] :
    {N, OS,
        < O : Node | status : [R, wait], decision : nil, votes : [VT, VF, VA], ATTS:U2S > 
        CONF
    }
    =>
    decide?(false, N <= VF, N, OS, 
        < O : Node | status : [R, wait], decision : nil, votes : [VT, VF, VA], ATTS:U2S >,
        CONF
    ) [narrowing] .


    rl [decide-2] :
    decide?(V, true, N, OS,
        < O : Node | status : [R, wait], decision : nil, ATTS:U24S >,
        CONF)
    =>
    {N, OS,
        < O : Node | status : [R, done], decision : V, ATTS:U24S >
        CONF
    } [narrowing] .


    rl [update-1-true] : 
    {N, OS,
        < O : Node | status : [R, wait], decision : nil, votes : [VT, VF, VA], ATTS:U2S >
        CONF
    }
    =>
    update?(true, (VT <  N) and (N <= VA) and (VF <= VT),
        N, OS,
        < O : Node | status : [R, wait], decision : nil, votes : [VT, VF, VA], ATTS:U2S >,
        CONF
    ) [narrowing] .

    rl [update-1-false] : 
    {N, OS,
        < O : Node | status : [R, wait], decision : nil, votes : [VT, VF, VA] >
        CONF
    }
    =>
    update?(false, (VF < N) and (N <= VA) and (VT < VF),
        N, OS,
        < O : Node | status : [R, wait], decision : nil, votes : [VT, VF, VA] >,
        CONF
    ) [narrowing] .

    eq [update-2] : 
    update?(V', true, N, OS,
        < O : Node | status : [R, wait], value : V, decision : nil, votes : [VT, VF, VA] >,
        CONF
    )
    =
    {N, OS,
        < O : Node | status : [s R, init], value : V', decision : nil, votes : [0, 0, 0] >
        CONF
    } [variant] .

    rl [loss] : 
    {N, OS, M CONF}
    =>
    {N, OS, CONF} [narrowing] .
endm

mod ONETHIRDRULE-STATIC-HALF is
    protecting ONETHIRDRULE-STATIC .
    protecting INV-HALF .
endm

mod ONETHIRDRULE-STATIC-TWOTHIRD is
    protecting ONETHIRDRULE-STATIC .
    protecting INV-TWOTHIRD .
endm

mod ONETHIRDRULE-STATIC-FIXED-OBJS is
    protecting ONETHIRDRULE-STATIC .
    protecting INV-FIXED-OBJS .
endm