load ./sorts/fvp-nat.maude
load ./sorts/sorts.maude
load ../heuristic-search/state.maude
load ../heuristic-search/invariant.maude

set include BOOL off .


mod CONFIGURATION is
    protecting NODE .
    protecting INITIAL-SORTS .

    sorts Attribute AttributeSet InitialAttribute InitialAttributeSet .
    subsort Attribute < AttributeSet .
    subsort InitialAttributeSet < AttributeSet .

    sorts None Object Msg ObjectSet MsgSet Configuration InitialObject InitialObjectSet .

    subsort MsgSet ObjectSet < Configuration .
    subsort InitialObject < Object InitialObjectSet < ObjectSet .
    subsort None < ObjectSet MsgSet .
    subsort Msg < MsgSet .

    op <_:_|_> : Oid Cid IU1234S -> InitialObject [ctor object] .
    op <_:_|_> : Oid Cid U1234S -> Object [ctor object] .
    op none : -> None [ctor] .
    op __ : None None -> None [ctor config assoc comm id: none] .
    op __ : InitialObjectSet InitialObjectSet -> InitialObjectSet [ctor config assoc comm id: none] .
    op __ : ObjectSet ObjectSet -> ObjectSet [ctor config assoc comm id: none] .
    op __ : MsgSet MsgSet -> MsgSet [ctor config assoc comm id: none] .
    op __ : Configuration Configuration -> Configuration [ctor config assoc comm id: none] .

endm


fmod MESSAGE-CONTENT is
    protecting FVP-NAT .
    sort MsgContent . 

    ops trueVote falseVote : Nat -> MsgContent [ctor] .
endfm



mod MULTICAST is 
  including CONFIGURATION .
  including MESSAGE-CONTENT .

  op multicast_from_to_ : MsgContent Oid OidSet -> Msg [ctor] .
  var MC : MsgContent . var SENDER : Oid .
  eq multicast MC from SENDER to none = none [variant] .
endm

mod GLOBAL is
    protecting CONFIGURATION .
    protecting FVP-NAT .
    including STATE .

    op {_,_,_} : Nat OidSet Configuration -> State [ctor] .
endm


mod ONETHIRDRULE-BASE is
    including GLOBAL .
    protecting VALUE .
    protecting MULTICAST .
    protecting BOOL .
    protecting FVP-NAT .
    protecting FVP-BOOL .

    op decideTrue : Bool' Nat OidSet Object Configuration -> State [ctor] .
    op decideFalse : Bool' Nat OidSet Object Configuration -> State [ctor] .
    op updateTrue : Bool' Nat OidSet Object Configuration -> State [ctor] .
    op updateFalse : Bool' Nat OidSet Object Configuration -> State [ctor] .

    vars N N' : Nat .

    ops _<=_ _<_ : Nat Nat -> Bool' .
    eq N <= N N' = true [variant] .
    eq N < N' = s N <= N' [variant] .
endm


mod INV-BASE is
    including ONETHIRDRULE-BASE .
    including INVARIANT .

    var N : Nat . var CONF : Configuration . var M : Msg . 
    vars O O' : Oid . var C : Cid .  var OIDS  : OidSet .
    var Z : Zero .

    op getOids : Configuration -> OidSet [memo] .
    eq getOids(< O : C | ATTS:U1234S > CONF) = O ; getOids(CONF) .
    eq getOids(M CONF) =  getOids(CONF) .
    eq getOids(none) =  none .

    op noDuplicate : OidSet -> Bool [memo] .
    eq noDuplicate(O ; O ; OIDS) = false .

    op isThresholdValid : OidSet Nat -> Bool [memo] .

    eq inv({N, OIDS, CONF}) 
    = noDuplicate(OIDS) 
    and noDuplicate(getOids(CONF)) 
    and isThresholdValid(getOids(CONF), N) .
endm

mod INV-HALF is
    including INV-BASE .

    vars O O' : Oid . var OIDS  : OidSet .
    var N : Nat . var Z : Zero .

    eq isThresholdValid((O ; O' ; OIDS), s N) = isThresholdValid(OIDS, N) .
    eq isThresholdValid(OIDS, Z) = false .

endm

mod INV-TWOTHIRD is
    including INV-BASE .

    vars O O' O'' : Oid . var OIDS  : OidSet .
    var N : Nat . var Z : Zero .

    eq isThresholdValid((O ; O' ; O'' ; OIDS), s s N) = isThresholdValid(OIDS, N) .
    eq isThresholdValid(OIDS, Z) = false .
    eq isThresholdValid(O ; O' ; OIDS, s) = false .
    eq isThresholdValid(O ; O' ; OIDS, s Z) = false .
endm
