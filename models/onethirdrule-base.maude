load ./sorts/fvp-nat.maude
load ./sorts/sorts.maude
load ../heuristic-search/state.maude

set include BOOL off .


mod CONFIGURATION is
    protecting NODE .
    protecting INITIAL-SORTS .

    sorts Attribute AttributeSet InitialAttribute InitialAttributeSet .
    subsort Attribute < AttributeSet .
    subsort InitialAttributeSet < AttributeSet .

    sorts None Object Msg ObjectSet MsgSet Configuration InitialObject InitialObjectSet .

    subsort MsgSet ObjectSet < Configuration .
    subsort InitialObject < Object InitialObjectSet < ObjectSet .
    subsort None < ObjectSet MsgSet .
    subsort Msg < MsgSet .

    op <_:_|_> : Oid Cid IU1234S -> InitialObject [ctor object] .
    op <_:_|_> : Oid Cid U1234S -> Object [ctor object] .
    op none : -> None [ctor] .
    op __ : None None -> None [ctor config assoc comm id: none] .
    op __ : InitialObjectSet InitialObjectSet -> InitialObjectSet [ctor config assoc comm id: none] .
    op __ : ObjectSet ObjectSet -> ObjectSet [ctor config assoc comm id: none] .
    op __ : MsgSet MsgSet -> MsgSet [ctor config assoc comm id: none] .
    op __ : Configuration Configuration -> Configuration [ctor config assoc comm id: none] .

endm


fmod MESSAGE-CONTENT is
    protecting FVP-NAT .
    sort MsgContent . 

    ops trueVote falseVote : Nat -> MsgContent [ctor] .
endfm



mod MULTICAST is 
  including CONFIGURATION .
  including MESSAGE-CONTENT .

  op multicast_from_to_ : MsgContent Oid OidSet -> Msg [ctor] .
  var MC : MsgContent . var SENDER : Oid .
  eq multicast MC from SENDER to none = none [variant] .
endm

mod GLOBAL is
    protecting CONFIGURATION .
    protecting FVP-NAT .
    including STATE .

    op {_,_,_} : Nat OidSet Configuration -> State [ctor] .
endm


mod ONETHIRDRULE-BASE is
    including GLOBAL .
    protecting VALUE .
    protecting MULTICAST .
    protecting BOOL .
    protecting FVP-NAT .
    protecting FVP-BOOL .

    vars O O' : Oid . vars CONF : Configuration . var M : Msg . var C : Cid .
    vars OIDS OIDS' : OidSet . 
    var R N N' VT VF VA : Nat .
    var Z : Zero .
    vars V : Value .

    rl [loss] : 
    {N, OIDS, M CONF}
    =>
    {N, OIDS, CONF} [narrowing] .

    rl [vote-true-new] : 
    {N, O ; OIDS,
        < O : Node | status : (0, init), value : true, decision : nil, votes : (VT, VF, VA) > 
        CONF
    }
    =>
    {N, O ; OIDS,
        < O : Node | status : (0, waiting), value : true, decision : nil, votes : (s VT, VF, s VA) > 
        (multicast trueVote(0) from O to OIDS)
        CONF
    } [narrowing] .

    rl [vote-true-existing] : 
    {N, O ; OIDS,
        < O : Node | status : (s R, init), value : true, decision : nil, votes : (VT, VF, VA) > 
        CONF
    }
    =>
    {N, O ; OIDS,
        < O : Node | status : (s R, waiting), value : true, decision : nil, votes : (s VT, VF, s VA) > 
        (multicast trueVote(s R) from O to OIDS)
        CONF
    } [narrowing] .


    rl [vote-false-new] : 
    {N, O ; OIDS,
        < O : Node | status : (0, init), value : false, decision : nil, votes : (VT, VF, VA) > 
        CONF
    }
    =>
    {N, O ; OIDS,
        < O : Node | status : (0, waiting), value : false, decision : nil, votes : (VT, s VF, s VA) > 
        (multicast falseVote(0) from O to OIDS)
        CONF
    } [narrowing] .

    rl [vote-false-existing] : 
    {N, O ; OIDS,
        < O : Node | status : (s R, init), value : false, decision : nil, votes : (VT, VF, VA) > 
        CONF
    }
    =>
    {N, O ; OIDS,
        < O : Node | status : (s R, waiting), value : false, decision : nil, votes : (VT, s VF, s VA) > 
        (multicast falseVote(s R) from O to OIDS)
        CONF
    } [narrowing] .


    rl [receive-true-vote] :
    {N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S > 
        (multicast trueVote(R) from O' to (O ; OIDS'))
        CONF
    } =>
    {N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (s VT, VF, s VA), ATTS:U2S > 
        (multicast trueVote(R) from O' to OIDS')  
        CONF
    } [narrowing] .

    rl [receive-false-vote] :
    {N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S > 
        (multicast falseVote(R) from O' to (O ; OIDS'))
        CONF
    } =>
    {N, OIDS,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, s VF, s VA), ATTS:U2S > 
        (multicast falseVote(R) from O' to OIDS')  
        CONF
    } [narrowing] .
endm

