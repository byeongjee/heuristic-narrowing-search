load ./sorts/fvp-nat.maude
load ./sorts/sorts.maude
load ../heuristic-search/state.maude
load ../heuristic-search/invariant.maude

set include BOOL off .


mod CONFIGURATION is
    protecting NODE .
    protecting INITIAL-SORTS .

    sorts Attribute AttributeSet InitialAttribute InitialAttributeSet .
    subsort Attribute < AttributeSet .
    subsort InitialAttributeSet < AttributeSet .

    sorts None Object Msg ObjectSet MsgSet Configuration InitialObject InitialObjectSet .

    subsort MsgSet ObjectSet < Configuration .
    subsort InitialObject < Object InitialObjectSet < ObjectSet .
    subsort None < ObjectSet MsgSet .
    subsort Msg < MsgSet .

    op <_:_|_> : Oid Cid IU1234S -> InitialObject [ctor object] .
    op <_:_|_> : Oid Cid U1234S -> Object [ctor object] .
    op none : -> None [ctor] .
    op __ : None None -> None [ctor config assoc comm id: none] .
    op __ : InitialObjectSet InitialObjectSet -> InitialObjectSet [ctor config assoc comm id: none] .
    op __ : ObjectSet ObjectSet -> ObjectSet [ctor config assoc comm id: none] .
    op __ : MsgSet MsgSet -> MsgSet [ctor config assoc comm id: none] .
    op __ : Configuration Configuration -> Configuration [ctor config assoc comm id: none] .

endm


fmod MESSAGE-CONTENT is
    protecting FVP-NAT .
    protecting SORTS .
    sort MsgContent . 

    op vote : Value Natural -> MsgContent [ctor] .
endfm



mod MULTICAST is 
  including CONFIGURATION .
  including MESSAGE-CONTENT .

  op multicast_from_to_ : MsgContent Oid OidSet -> Msg [ctor] .
  var MC : MsgContent . var SENDER : Oid .
  eq multicast MC from SENDER to none = none [variant] .
endm

mod GLOBAL is
    protecting CONFIGURATION .
    protecting FVP-NAT .
    including STATE .

    op {_,_,_} : Natural OidSet Configuration -> State [ctor] .
    op decide? :  Value Boolean Natural OidSet Object Configuration -> State [ctor] .
    op update? :  Value Boolean Natural OidSet Object Configuration -> State [ctor] .
endm


mod ONETHIRDRULE-BASE is
    including GLOBAL .
    protecting VALUE .
    protecting MULTICAST .
    protecting BOOL .
    protecting FVP-NAT .
    protecting FVP-BOOL .


    vars N N' VT VF VA : Natural .

    ops _<=_ _<_ : Natural Natural -> Boolean .
    eq N <= N N' = true [variant] .
    eq N < N' = s N <= N' [variant] .

    op update : Vote Value -> Vote .
    eq update([VT, VF, VA], true) = [s VT, VF, s VA] [variant] .
    eq update([VT, VF, VA], false) = [VT, s VF, s VA] [variant] .
endm


mod INV-BASE is
    including ONETHIRDRULE-BASE .
    including INVARIANT .

    vars N R : Natural . 
    var Z : Zero .  
    var S : Step .
    var CONF : Configuration . var M : Msg . 
    vars O O' : Oid . var C : Cid .  var OS  : OidSet .

    op getOids : Configuration -> OidSet [memo] .
    eq getOids(< O : C | ATTS:U1234S > CONF) = O ; getOids(CONF) .
    eq getOids(M CONF) =  getOids(CONF) .
    eq getOids(none) =  none .

    eq inv(S:[State]) = true .

    eq initialCond({N, OS, CONF})
    = noDuplicate(OS) 
    and noDuplicate(CONF) 
    and sameRound(CONF) 
    and validThreshold(numObjs(CONF), N) .

    op numObjs : Configuration -> Natural .
    eq numObjs(< O : Node | ATTS:U1234S > CONF) = s numObjs(CONF) .
    eq numObjs(M CONF) = numObjs(CONF) .
    eq numObjs(none) = 0 .

    op noDuplicate : OidSet -> Bool .
    eq noDuplicate(O ; O ; OS) = false .

    op noDuplicate : Configuration -> Bool .
    eq noDuplicate(< O : Node | ATTS:U1234S > < O : Node | ATTS':U1234S > CONF) = false .

    op sameRound : Configuration -> Bool .
    eq sameRound(< O : Node | status : [R, S], ATTS:U234S > < O' : Node | status : [s R N, S], ATTS':U234S > CONF) = false .

    op validThreshold : Natural Natural -> Bool .
endm

mod INV-HALF is
    including INV-BASE .

    vars O O' : Oid . var CONF : Configuration .
    vars N N' : Natural . var Z : Zero .

    eq validThreshold(s s N, s N') 
    = validThreshold(N, N') .
    eq validThreshold(N, Z) = false .
endm

mod INV-TWOTHIRD is
    including INV-BASE .

    vars O O' O'' : Oid . var CONF : Configuration .
    vars N N' : Natural . var Z : Zero .

    eq validThreshold(s s s N, s s N') 
    = validThreshold(N, N') .
    eq validThreshold(s s N, Z) = false .
    eq validThreshold(s s N, s Z) = false .
endm
