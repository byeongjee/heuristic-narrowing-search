
load ./sorts/fvp-bool.maude
load ./sorts/fvp-nat.maude
load ./sorts/sorts.maude

set include BOOL off .


mod ALT-CONFIGURATION is
    protecting NODE .
    protecting INITIAL-SORTS .

    sorts None Object Msg ObjectSet Configuration InitObject InitConfiguration .
    subsort InitObject < Object InitConfiguration < Configuration .
    subsort Msg < Configuration .

    op none : -> InitConfiguration [ctor] .
    op __ : InitConfiguration InitConfiguration -> InitConfiguration [ctor assoc comm id: none] .
    op __ : Configuration Configuration -> Configuration [ctor assoc comm id: none] .

    op <_:_|_> : Oid Cid IU1234S -> InitObject [ctor object] .
    op <_:_|_> : Oid Cid U1234S -> Object [ctor object] .
endm


fmod MESSAGE-CONTENT is
    protecting FVP-NAT .
    protecting SORTS .
    sort MsgContent . 

    op vote : Value Natural -> MsgContent [ctor] .
endfm



mod MULTICAST is 
  including ALT-CONFIGURATION .
  including MESSAGE-CONTENT .

  op multicast_from_to_ : MsgContent Oid OidSet -> Msg [ctor] .
  var MC : MsgContent . var SENDER : Oid .
  eq multicast MC from SENDER to none = none [variant] .
  eq multicast MC from SENDER to none = none .
endm


mod GLOBAL is
    protecting ALT-CONFIGURATION .
    protecting FVP-NAT .
    including STATE .

    op {_,_,_} : Natural OidSet Configuration -> State [ctor] .
    op decide? :  Value Boolean Natural OidSet Object Configuration -> State [ctor] .
    op update? :  Value Boolean Natural OidSet Object Configuration -> State [ctor] .
endm


mod ONETHIRDRULE-BASE is
    including GLOBAL .
    protecting VALUE .
    protecting MULTICAST .
    protecting BOOL .
    protecting SET{Natural} .
    protecting FVP-BOOL .

    vars N N' R : Natural . 
    var Z : FZero .  
    var S : Step .
    var CONF : Configuration . 
    var MSG : Msg . 
    var O : Oid . 
    var OS : OidSet .
    var NS : Set{Natural} .

    op noDupl : OidSet -> Bool .
    eq noDupl(O ; O ; OS) = false .

    op sameRound : Set{Natural} -> Bool .
    eq sameRound((R, s R N, NS)) = false .
    eq sameRound((R, R, NS)) = sameRound((R, NS)) .

    op isHalfThreshold  : Natural Natural -> Bool .
    eq isHalfThreshold(s s N, s N') 
     = isHalfThreshold(N, N') .
    eq isHalfThreshold(N, Z) = false .

    op getOids : Configuration -> OidSet [memo] .
    eq getOids(< O : C | ATTS:U1234S > CONF) = O ; getOids(CONF) .
    eq getOids(MSG CONF) =  getOids(CONF) .
    eq getOids(none) =  none .

    op numObjs : Configuration -> Natural .
    eq numObjs(< O : Node | ATTS:U1234S > CONF) = s numObjs(CONF) .
    eq numObjs(MSG CONF) = numObjs(CONF) .
    eq numObjs(none) = 0 .

    op getRounds : Configuration -> Set{Natural} .
    eq getRounds(< O : Node | status : [R, S], ATTS:U234S > CONF) = R, getRounds(CONF) .
    eq getRounds(MSG CONF) = getRounds(CONF) .
    eq getRounds(none) = 0 .
endm


mod INV-BASE is
    including ONETHIRDRULE-BASE .
    including INVARIANT .

    var S : State .
    var N : Natural .
    var OS : OidSet .
    var CONF : Configuration .

    eq inv(S) = true .
    eq initCond({N, OS, CONF})
     = noDupl(OS) and noDupl(getOids(CONF)) and sameRound(getRounds(CONF)) .
endm


mod INV-HALF is
    including ONETHIRDRULE-BASE .
    including INVARIANT .

    var S : State .
    var N : Natural .
    var OS : OidSet .
    var CONF : Configuration .

    eq inv(S) = true .
    eq initCond({N, OS, CONF})
     = noDupl(OS) and noDupl(getOids(CONF)) and sameRound(getRounds(CONF))
       and isHalfThreshold(numObjs(CONF), N) .
endm
