load nat2.maude
load bounded-narrowing.maude
load sorts.maude

set include BOOL off .


mod CONFIGURATION is
    protecting BOOL2 .
    protecting NAT2 .
    protecting VALUE .
    protecting NODE .
    protecting STATUS .
    protecting VOTE .
    protecting OID-SET .
    protecting INITIAL-SORTS .

    sorts Attribute AttributeSet InitialAttribute InitialAttributeSet .
    subsort Attribute < AttributeSet .
    subsort InitialAttributeSet < AttributeSet .

    sorts None Object Msg ObjectSet MsgSet Configuration InitialObject InitialObjectSet .

    subsort MsgSet ObjectSet < Configuration .
    subsort InitialObject < Object InitialObjectSet < ObjectSet .
    subsort None < ObjectSet MsgSet .
    subsort Msg < MsgSet .

    op <_:_|_> : Oid Cid IU1234S -> InitialObject [ctor object] .
    op <_:_|_> : Oid Cid U1234S -> Object [ctor object] .
    op none : -> None [ctor] .
    op __ : None None -> None [ctor config assoc comm id: none] .
    op __ : InitialObjectSet InitialObjectSet -> InitialObjectSet [ctor config assoc comm id: none] .
    op __ : ObjectSet ObjectSet -> ObjectSet [ctor config assoc comm id: none] .
    op __ : MsgSet MsgSet -> MsgSet [ctor config assoc comm id: none] .
    op __ : Configuration Configuration -> Configuration [ctor config assoc comm id: none] .

endm


fmod MESSAGE-CONTENT is
    protecting NAT2 .
    sort MsgContent . 

    ops trueVote falseVote : Nat2 -> MsgContent [ctor] .
endfm



mod MULTICAST is 
  including CONFIGURATION .
  including MESSAGE-CONTENT .

  op multicast_from_to_ : MsgContent Oid OidSet -> Msg [ctor] .
  var MC : MsgContent . var SENDER : Oid .
  eq multicast MC from SENDER to none = none [variant] .
endm

mod GLOBAL is
    protecting CONFIGURATION .
    protecting NAT2 .

    sort State .

    op {_,_} : Nat2 Configuration -> State [ctor] .
endm


mod ONETHIRDRULE is
    including GLOBAL .
    protecting NAT2 .
    protecting VALUE .
    protecting MULTICAST .
    protecting BOOL2 .
    protecting BOOL .

    vars O O' O'' : Oid . vars CONF REST : Configuration . vars C C' : Cid .
    var MSG : Msg .  var MC : MsgContent .
    vars NEIGHBORS OIDS : OidSet .
    var R : Nat2 .
    vars N N' REM REM' : Nat2 .
    vars VT VF VA : Nat2 .
    vars STEP STEP' : Step .
    vars V D : Value .

    rl [vote-true] : 
    {N,
        < O : Node | status : (R, init), value : true, decision : nil, votes : (0, 0, 0) > 
        < O' : Node | ATTS:U1234S >
        CONF
    }
    =>
    {N,
        < O : Node | status : (R, waiting), value : true, decision : nil, votes : (s, 0, s) > 
        < O' : Node | ATTS:U1234S >
        (multicast trueVote(R) from O to O')
        CONF
    } [narrowing] .

    rl [vote-false] : 
    {N,
        < O : Node | status : (R, init), value : false, decision : nil, votes : (0, 0, 0) > 
        < O' : Node | ATTS:U1234S >
        CONF
    }
    =>
    {N,
        < O : Node | status : (R, waiting), value : false, decision : nil, votes : (0, s, s) > 
        < O' : Node | ATTS:U1234S >
        (multicast falseVote(R) from O to O')
        CONF
    } [narrowing] .


    rl [receive-true-vote] :
    {N,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S > 
        (multicast trueVote(R) from O' to (O ; OIDS))
        CONF
    } =>
    {N,
        < O : Node | status : (R, waiting), decision : nil, votes : (s VT, VF, s VA), ATTS:U2S > 
        (multicast trueVote(R) from O' to OIDS)  
        CONF
    } [narrowing] .

    rl [receive-false-vote] :
    {N,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S > 
        (multicast falseVote(R) from O' to (O ; OIDS))
        CONF
    } =>
    {N,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, s VF, s VA), ATTS:U2S > 
        (multicast falseVote(R) from O' to OIDS)  
        CONF
    } [narrowing] .


    op decideTrue : Bool2 Nat2 Object Configuration -> State [ctor] .
    op decideFalse : Bool2 Nat2 Object Configuration -> State [ctor] .
    op timeoutTrue : Bool2 Nat2 Object Configuration -> State [ctor] .
    op timeoutFalse : Bool2 Nat2 Object Configuration -> State [ctor] .

    op leq : Nat2 Nat2 -> Bool2 .
    eq leq(N, N N') = true [variant] .

    rl [decideTrue-1] :
    {N,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S > 
        CONF
    }
    =>
    decideTrue(leq(N, VT),
        N,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S >,
        CONF
    ) [narrowing] .

    rl [decideTrue-2] :
    decideTrue(true,
        N,
        < O : Node | status : (R, waiting), decision : nil, ATTS:U24S >,
        CONF
    ) 
    =>
    {N,
        < O : Node | status : (R, finished), decision : true, ATTS:U24S  >
        CONF
    } [narrowing] .

    rl [decideFalse-1] :
    {N,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S > 
        CONF
    }
    =>
    decideFalse(leq(N, VF),
        N,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S >,
        CONF
    ) [narrowing] .

    rl [decideFalse-2] :
    decideFalse(true,
        N,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U24S >,
        CONF)
    =>
    {N,
        < O : Node | status : (R, finished), decision : false, votes : (VT, VF, VA), ATTS:U24S >
        CONF
    } [narrowing] .

    rl [timeoutTrue-1] : 
    {N,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S >
        CONF
    }
    =>
    timeoutTrue(
        leq(s VT, N) and leq(N, VA) and leq(VF, VT),
        N,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S >,
        CONF
    ) [narrowing] .

    rl [timeoutTrue-2] : 
    timeoutTrue(
        true,
        N,
        < O : Node | status : (R, waiting), value : V, decision : nil, votes : (VT, VF, VA) >,
        CONF
    )
    =>
    {N,
        < O : Node | status : (s R, init), value : true, decision : nil, votes : (0, 0, 0) >
        CONF
    } [narrowing] .

    rl [timeoutFalse-1] : 
    {N,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S >
        CONF
    }
    =>
    timeoutFalse(
        leq(s VF, N) and leq(N, VA) and leq(s VT, VF),
        N,
        < O : Node | status : (R, waiting), decision : nil, votes : (VT, VF, VA), ATTS:U2S >,
        CONF
    ) [narrowing] .

    rl [timeoutFalse-2] : 
    timeoutFalse(
        true,
        N,
        < O : Node | status : (R, waiting), value : V, decision : nil, votes : (VT, VF, VA) >,
        CONF
    )
    =>
    {N,
        < O : Node | status : (s R, init), value : false, decision : nil, votes : (0, 0, 0) >
        CONF
    } [narrowing] .

    op invariant : State -> Bool .
    eq invariant(SK:[State]) = true .
    op invariant : State -> Bool .
    eq initialInvariant(SK:[State]) = true .

endm


mod ONETHIRDRULE-SIMPL-TEST is
    including ONETHIRDRULE .
    protecting HEURISTIC-NARROWING .

    vars O O' O'' O1 O2 O3 O4 : Oid .
    vars C1 C2 C3 C4 : Cid .
    vars OIDS ALL : OidSet .
    vars R R' : Nat2 .
    vars V V' : Value .
    vars N N' : Nat2 .
    vars VT VF VA  : Nat2 .
    vars VT' VF' VA' : Nat2 .
    vars NEIGHBORS NEIGHBORS' : OidSet .
    var INITIAL : InitialObjectSet .
    vars STEP STEP' : Step .
    var CONF : Configuration .

    ops a b c d : -> Oid .

endm



set print attribute on .


red  metaHeuristicNarrowingSearch(
    upModule('ONETHIRDRULE-SIMPL-TEST, false),
    upTerm({s s s, INITIAL}),
    upTerm({s s s,
    < O : Node | decision : true, ATTS:U124S >
    CONF}),
    delay filter) .

***(
vu-narrow {delay, filter} [1]
{s, INITIAL} =>* {s,
    < O : Node | decision : true, ATTS:U124S >
    CONF
} .

vu-narrow {delay, filter} [1]
{s s, INITIAL} =>* {s s,
    < O : Node | decision : true, ATTS:U124S >
    CONF
} .

vu-narrow {delay, filter} [1]
{s s s, INITIAL} =>* {s s s,
    < O : Node | decision : true, ATTS:U124S >
    CONF
} .

vu-narrow {delay, filter} [1]
{s s s s, INITIAL} =>* {s s s s,
    < O : Node | decision : true, ATTS:U124S >
    CONF
} .
)